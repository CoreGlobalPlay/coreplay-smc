{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/CoinFlip/CoinFlip.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"../Leaderboard/Leaderboard.sol\";\n\ncontract CoinFlip is AccessControl, Pausable {\n    // -----------\n    /// Constants\n    // -----------\n    bytes32 private constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    uint256 public constant GAME_ID = 1;\n\n    // -----------\n    /// Storages\n    // -----------\n    uint256 public totalGame;\n    address public leaderboard;\n\n    // -----------\n    // Events\n    // -----------\n    event Game(uint256 betAmount, uint256 fee, address user, bool isWin);\n\n    constructor(address leaderboard_) {\n        address sender = _msgSender();\n\n        _grantRole(DEFAULT_ADMIN_ROLE, sender);\n        _grantRole(ADMIN_ROLE, sender);\n\n        leaderboard = leaderboard_;\n    }\n\n    function flip(bool gtSide) external payable whenNotPaused {\n        address sender = _msgSender();\n        // take fee\n        (uint256 _betAmount, uint256 fee) = Leaderboard(leaderboard).takeFee{\n            value: msg.value\n        }();\n        uint256 _rewardAmount = 2 * _betAmount;\n        require(leaderboard.balance >= _rewardAmount, \"house out of balance\");\n\n        totalGame = totalGame + 1;\n\n        // check result\n        bool gtResult = getRandomBool();\n        bool isWin = gtResult == gtSide;\n\n        if (!isWin) {\n            _rewardAmount = 0;\n        }\n        Leaderboard(leaderboard).earnReward(\n            GAME_ID,\n            msg.sender,\n            _rewardAmount,\n            _betAmount\n        );\n\n        emit Game(_betAmount, fee, sender, isWin);\n    }\n\n    function setLeaderboard(address leaderboard_) public onlyRole(ADMIN_ROLE) {\n        leaderboard = leaderboard_;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() external onlyRole(ADMIN_ROLE) whenNotPaused {\n        _pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() external onlyRole(ADMIN_ROLE) whenPaused {\n        _unpause();\n    }\n\n    receive() external payable {}\n\n    function getRandomBool() internal view returns (bool) {\n        uint256 randomHash = uint256(\n            keccak256(abi.encodePacked(block.number, totalGame, msg.sender))\n        );\n        return randomHash % 2 == 0;\n    }\n}\n"
    },
    "contracts/Crash/Crash.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"../Leaderboard/Leaderboard.sol\";\n\ncontract Crash is AccessControl, Pausable {\n    // -----------\n    /// Constants\n    // -----------\n    bytes32 private constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    uint256 public constant GAME_ID = 2;\n\n    // -----------\n    /// Storages\n    // -----------\n    uint256 public totalGame;\n    address public leaderboard;\n\n    // -----------\n    // Events\n    // -----------\n    event Game(uint256 betAmount, uint256 fee, address user, bool isWin);\n\n    constructor(address leaderboard_) {\n        address sender = _msgSender();\n\n        _grantRole(DEFAULT_ADMIN_ROLE, sender);\n        _grantRole(ADMIN_ROLE, sender);\n\n        leaderboard = leaderboard_;\n    }\n\n    function _calculateBetArray(\n        uint256 multiplier\n    ) public pure returns (uint256 winRate, uint256 totalRate) {\n        // Extract the fractional part by multiplying the multiplier by 100 and getting the remainder\n        uint256 fraction = multiplier % 100;\n\n        // Determine the number of repetitions based on the fractional part\n        if (fraction == 25) {\n            winRate = 4;\n        } else if (fraction == 50) {\n            winRate = 2;\n        } else if (fraction == 75) {\n            winRate = 4; // Needs 4 repetitions to sum to a whole number\n        } else {\n            winRate = 1; // Whole numbers and zero fraction\n        }\n\n        // Calculate the total sum when the multiplier is used 'repeatMultiplier' times\n        uint256 totalSum = multiplier * winRate;\n\n        // Calculate the total number of elements needed (rounded up to ensure whole number)\n        totalRate = (totalSum + 99) / 100; // Ceiling equivalent for total sum\n    }\n\n    // multiplier: 100 -> 10000 (x1 -> x100)\n    function crash(uint256 multiplier) external payable whenNotPaused {\n        // Validate must divisable to 25\n        require(\n            multiplier > 100 && multiplier < 10000 && multiplier % 25 == 0,\n            \"invalid multiplier\"\n        );\n\n        address sender = _msgSender();\n        // take fee\n        (uint256 _betAmount, uint256 fee) = Leaderboard(leaderboard).takeFee{\n            value: msg.value\n        }();\n        uint256 _rewardAmount = (multiplier * _betAmount) / 100;\n        require(leaderboard.balance >= _rewardAmount, \"house out of balance\");\n        totalGame = totalGame + 1;\n\n        (uint256 winRate, uint256 totalRate) = _calculateBetArray(multiplier);\n\n        // check result\n        uint256 rand = getRandomUint();\n        rand = rand % totalRate;\n\n        bool isWin = rand < winRate;\n        if (!isWin) {\n            _rewardAmount = 0;\n        }\n        Leaderboard(leaderboard).earnReward(\n            GAME_ID,\n            msg.sender,\n            _rewardAmount,\n            _betAmount\n        );\n\n        emit Game(_betAmount, fee, sender, isWin);\n    }\n\n    function setLeaderboard(address leaderboard_) public onlyRole(ADMIN_ROLE) {\n        leaderboard = leaderboard_;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() external onlyRole(ADMIN_ROLE) whenNotPaused {\n        _pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() external onlyRole(ADMIN_ROLE) whenPaused {\n        _unpause();\n    }\n\n    receive() external payable {}\n\n    function getRandomUint() internal view returns (uint256) {\n        return\n            uint256(\n                keccak256(abi.encodePacked(block.number, totalGame, msg.sender))\n            );\n    }\n}\n"
    },
    "contracts/Leaderboard/Leaderboard.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract Leaderboard is AccessControl {\n    bytes32 private constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 private constant GAME_ROLE = keccak256(\"GAME_ROLE\");\n    bytes32 private constant WITHDRAWER = keccak256(\"WITHDRAWER\");\n    uint256 private constant FEE_DENOMINATOR = 10_000;\n\n    //////////////\n    /// Storage\n    //////////////\n    mapping(address => uint256) public points;\n    uint256 public betFee;\n    uint256 public minBet;\n    uint256 public maxBet;\n    address public feeReceiver;\n    uint256 public govFee;\n    address public govAddress;\n\n    //////////////\n    /// Events\n    //////////////\n    event NewPoint(\n        uint256 gameId,\n        address user,\n        uint256 earnAmount,\n        uint256 betAmount\n    );\n    event Withdraw(address user, uint256 amount);\n    event Deposit(address user, uint256 amount);\n\n    //////////////\n    /// Constructor\n    //////////////\n    constructor() {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(ADMIN_ROLE, msg.sender);\n        _grantRole(GAME_ROLE, msg.sender);\n        _grantRole(WITHDRAWER, msg.sender);\n\n        betFee = 350;\n        minBet = 25 ether / 100_000; // 0.00025\n        maxBet = 2 ether / 100; // 0.02\n        govFee = 1 ether / 1_000_000; // 0.000001\n\n        feeReceiver = msg.sender;\n        govAddress = msg.sender;\n    }\n\n    function takeFee() public payable returns (uint256 betAmount, uint256 fee) {\n        uint256 _betAmountBeforeFee = msg.value - govFee;\n        betAmount =\n            (_betAmountBeforeFee * FEE_DENOMINATOR) /\n            (FEE_DENOMINATOR + betFee);\n        require(betAmount >= minBet && betAmount <= maxBet, \"invalid bet\");\n\n        fee = _betAmountBeforeFee - betAmount;\n\n        payable(govAddress).transfer(govFee);\n        payable(feeReceiver).transfer(fee);\n    }\n\n    function setBetFee(uint256 val) public onlyRole(ADMIN_ROLE) {\n        betFee = val;\n    }\n\n    function setMinBet(uint256 val) public onlyRole(ADMIN_ROLE) {\n        require(val <= maxBet, \"invalid bet\");\n        minBet = val;\n    }\n\n    function setMaxBet(uint256 val) public onlyRole(ADMIN_ROLE) {\n        require(val >= minBet, \"invalid bet\");\n        maxBet = val;\n    }\n\n    function setGovFee(uint256 val) public onlyRole(ADMIN_ROLE) {\n        govFee = val;\n    }\n\n    function setFeeReceiver(address receiver) public onlyRole(ADMIN_ROLE) {\n        feeReceiver = receiver;\n    }\n\n    function setGovAddress(address gov) public onlyRole(ADMIN_ROLE) {\n        govAddress = gov;\n    }\n\n    function withdrawAll(address addr) external onlyRole(WITHDRAWER) {\n        address payable _to = payable(addr);\n        _to.transfer(address(this).balance);\n        emit Withdraw(msg.sender, address(this).balance);\n    }\n\n    function withdraw(\n        address addr,\n        uint256 amount\n    ) external onlyRole(WITHDRAWER) {\n        uint256 balance = address(this).balance;\n        require(amount <= balance, \"invalid amount\");\n        address payable _to = payable(addr);\n        _to.transfer(amount);\n        emit Withdraw(msg.sender, amount);\n    }\n\n    function earnReward(\n        uint256 gameId,\n        address user,\n        uint256 earnAmount,\n        uint256 betAmount\n    ) external onlyRole(GAME_ROLE) {\n        if (earnAmount > 0) {\n            payable(user).transfer(earnAmount);\n            if (earnAmount > betAmount) {\n                points[user] += (earnAmount - betAmount);\n                emit NewPoint(gameId, user, earnAmount, betAmount);\n            }\n        }\n    }\n\n    function deposit() public payable {\n        emit Deposit(msg.sender, msg.value);\n    }\n}\n"
    },
    "contracts/Mines/Mines.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"../Leaderboard/Leaderboard.sol\";\n\ncontract Mines is AccessControl, Pausable {\n    // -----------\n    /// Constants\n    // -----------\n    bytes32 private constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    uint64 public constant GRID_SIZE = 16;\n    uint256 public constant GAME_ID = 4;\n\n    // -----------\n    /// Storages\n    // -----------\n    uint256 public totalGame;\n    address public leaderboard;\n\n    // -----------\n    // Events\n    // -----------\n    event Game(\n        uint256 betAmount,\n        uint256 fee,\n        address user,\n        uint256 reward,\n        uint256 multiplier\n    );\n\n    constructor(address leaderboard_) {\n        address sender = _msgSender();\n\n        _grantRole(DEFAULT_ADMIN_ROLE, sender);\n        _grantRole(ADMIN_ROLE, sender);\n\n        leaderboard = leaderboard_;\n    }\n\n    function _calculateBetArray(\n        uint256 mines,\n        uint256 level\n    )\n        public\n        pure\n        returns (uint256 winRate, uint256 totalRate, uint256 multiplier)\n    {\n        totalRate = GRID_SIZE - level;\n        winRate = totalRate - mines;\n        multiplier = uint256((totalRate * 100) / (totalRate - mines));\n    }\n\n    function checkMine(\n        uint256 mines,\n        uint256 level\n    ) external payable whenNotPaused {\n        require(\n            mines == 1 ||\n                mines == 3 ||\n                mines == 5 ||\n                mines == 10 ||\n                mines == 15,\n            \"invalid mines\"\n        );\n        require(mines <= GRID_SIZE - level, \"Mines exceed remaining cells\");\n\n        address sender = _msgSender();\n        // take fee\n        (uint256 _betAmount, uint256 fee) = Leaderboard(leaderboard).takeFee{\n            value: msg.value\n        }();\n\n        (\n            uint256 winRate,\n            uint256 totalRate,\n            uint256 multiplier\n        ) = _calculateBetArray(mines, level);\n        uint256 _rewardAmount = (multiplier * _betAmount) / 100;\n        require(leaderboard.balance >= _rewardAmount, \"house out of balance\");\n        totalGame = totalGame + 1;\n\n        // check result\n        uint256 rand = getRandomUint();\n        rand = rand % totalRate;\n\n        bool isWin = rand < winRate;\n        if (!isWin) {\n            _rewardAmount = 0;\n            multiplier = 0;\n        }\n        Leaderboard(leaderboard).earnReward(\n            GAME_ID,\n            msg.sender,\n            _rewardAmount,\n            _betAmount\n        );\n\n        emit Game(_betAmount, fee, sender, _rewardAmount, multiplier);\n    }\n\n    function setLeaderboard(address leaderboard_) public onlyRole(ADMIN_ROLE) {\n        leaderboard = leaderboard_;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() external onlyRole(ADMIN_ROLE) whenNotPaused {\n        _pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() external onlyRole(ADMIN_ROLE) whenPaused {\n        _unpause();\n    }\n\n    receive() external payable {}\n\n    function getRandomUint() internal view returns (uint256) {\n        return\n            uint256(\n                keccak256(abi.encodePacked(block.number, totalGame, msg.sender))\n            );\n    }\n}\n"
    },
    "contracts/Plinko/Plinko.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"../Leaderboard/Leaderboard.sol\";\n\ncontract Plinko is AccessControl, Pausable {\n    // -----------\n    /// Constants\n    // -----------\n    bytes32 private constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    uint256 private constant DEGEN_LENGTH = 49;\n    uint256 private constant BASIC_LENGTH = 66;\n    uint256 private constant MAX_MULTIPLIER = 1500;\n    uint256 public constant GAME_ID = 3;\n\n    // -----------\n    /// Storages\n    // -----------\n    uint256 public totalGame;\n    address public leaderboard;\n    mapping(uint256 => uint256) public degenMultiplier;\n    mapping(uint256 => uint256) public basicMultiplier;\n\n    // -----------\n    // Events\n    // -----------\n    event Game(\n        uint256 betAmount,\n        uint256 fee,\n        address user,\n        uint256 multiplier,\n        uint256 rewardAmount\n    );\n\n    constructor(address leaderboard_) {\n        address sender = _msgSender();\n\n        _grantRole(DEFAULT_ADMIN_ROLE, sender);\n        _grantRole(ADMIN_ROLE, sender);\n\n        leaderboard = leaderboard_;\n\n        // Degen\n        degenMultiplier[43] = 200;\n        degenMultiplier[44] = 200;\n        degenMultiplier[45] = 1000;\n        degenMultiplier[46] = 1000;\n        degenMultiplier[47] = 1000;\n        degenMultiplier[48] = 1500;\n\n        // Basic\n        for (uint256 i = 0; i < 48; i++) basicMultiplier[i] = 50;\n        for (uint256 i = 48; i < 58; i++) basicMultiplier[i] = 150;\n        for (uint256 i = 58; i < 65; i++) basicMultiplier[i] = 300;\n        basicMultiplier[65] = 600;\n    }\n\n    function _calculateBetArray(\n        uint256 multiplier\n    ) public pure returns (uint256 winRate, uint256 totalRate) {\n        // Extract the fractional part by multiplying the multiplier by 100 and getting the remainder\n        uint256 fraction = multiplier % 100;\n\n        // Determine the number of repetitions based on the fractional part\n        if (fraction == 25) {\n            winRate = 4;\n        } else if (fraction == 50) {\n            winRate = 2;\n        } else if (fraction == 75) {\n            winRate = 4; // Needs 4 repetitions to sum to a whole number\n        } else {\n            winRate = 1; // Whole numbers and zero fraction\n        }\n\n        // Calculate the total sum when the multiplier is used 'repeatMultiplier' times\n        uint256 totalSum = multiplier * winRate;\n\n        // Calculate the total number of elements needed (rounded up to ensure whole number)\n        totalRate = (totalSum + 99) / 100; // Ceiling equivalent for total sum\n    }\n\n    function plinko(bool degen, uint256 ball) external payable whenNotPaused {\n        address sender = _msgSender();\n        // take fee\n        (uint256 _betAmount, uint256 fee) = Leaderboard(leaderboard).takeFee{\n            value: msg.value\n        }();\n        uint256 maxRewardAmount = (ball * (MAX_MULTIPLIER * _betAmount)) / 100;\n        require(leaderboard.balance >= maxRewardAmount, \"house out of balance\");\n        totalGame += ball;\n\n        uint256 totalRate = degen ? DEGEN_LENGTH : BASIC_LENGTH;\n\n        // check result\n        uint totalRewardAmount = 0;\n        uint256 rand = getRandomUint();\n        for (uint256 i = 0; i < ball; i++) {\n            uint256 randIndex = (rand * (i + 1)) % totalRate;\n\n            uint256 multiplier = degen\n                ? degenMultiplier[randIndex]\n                : basicMultiplier[randIndex];\n            uint rewardAmount = (multiplier * _betAmount) / 100;\n            totalRewardAmount += rewardAmount;\n            emit Game(_betAmount, fee, sender, multiplier, rewardAmount);\n        }\n\n        Leaderboard(leaderboard).earnReward(\n            GAME_ID,\n            msg.sender,\n            totalRewardAmount,\n            _betAmount * ball\n        );\n    }\n\n    function setLeaderboard(address leaderboard_) public onlyRole(ADMIN_ROLE) {\n        leaderboard = leaderboard_;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() external onlyRole(ADMIN_ROLE) whenNotPaused {\n        _pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() external onlyRole(ADMIN_ROLE) whenPaused {\n        _unpause();\n    }\n\n    receive() external payable {}\n\n    function getRandomUint() internal view returns (uint256) {\n        return\n            uint256(\n                keccak256(abi.encodePacked(block.number, totalGame, msg.sender))\n            );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}