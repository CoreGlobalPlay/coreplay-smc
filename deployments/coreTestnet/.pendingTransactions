{
  "0x7ab348218f63881a6e06ae5764e021e7427703229b56218d9233833f93774291": {
    "name": "Leaderboard",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "Leaderboard",
      "sourceName": "contracts/Leaderboard/Leaderboard.sol",
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "AccessControlBadConfirmation",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "neededRole",
              "type": "bytes32"
            }
          ],
          "name": "AccessControlUnauthorizedAccount",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "earnAmount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "betAmount",
              "type": "uint256"
            }
          ],
          "name": "NewPoint",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "previousAdminRole",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "newAdminRole",
              "type": "bytes32"
            }
          ],
          "name": "RoleAdminChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "name": "RoleGranted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "name": "RoleRevoked",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "DEFAULT_ADMIN_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            }
          ],
          "name": "getRoleAdmin",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "grantRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "hasRole",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "earnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "betAmount",
              "type": "uint256"
            }
          ],
          "name": "newPoint",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "callerConfirmation",
              "type": "address"
            }
          ],
          "name": "renounceRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "revokeRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "0x608060405234801561000f575f5ffd5b5061001a5f3361004b565b506100457f6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa883361004b565b506100f4565b5f828152602081815260408083206001600160a01b038516845290915281205460ff166100eb575f838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556100a33390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016100ee565b505f5b92915050565b6105dc806101015f395ff3fe608060405234801561000f575f5ffd5b5060043610610085575f3560e01c80635f4717fe116100585780635f4717fe1461010957806391d148541461011c578063a217fddf14610152578063d547741f14610159575f5ffd5b806301ffc9a714610089578063248a9ca3146100b15780632f2ff15d146100e157806336568abe146100f6575b5f5ffd5b61009c6100973660046104cc565b61016c565b60405190151581526020015b60405180910390f35b6100d36100bf366004610512565b5f9081526020819052604090206001015490565b6040519081526020016100a8565b6100f46100ef366004610544565b610204565b005b6100f4610104366004610544565b61022e565b6100f461011736600461056e565b61027f565b61009c61012a366004610544565b5f918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6100d35f81565b6100f4610167366004610544565b610300565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806101fe57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b5f8281526020819052604090206001015461021e81610324565b6102288383610331565b50505050565b6001600160a01b0381163314610270576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61027a82826103d8565b505050565b7f6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa886102a981610324565b604080518681526001600160a01b0386166020820152908101849052606081018390527f369ef82f66eadde18e1bbf5e74404786f74da46573b0a7c36a5faa128cb1d3fe9060800160405180910390a15050505050565b5f8281526020819052604090206001015461031a81610324565b61022883836103d8565b61032e8133610459565b50565b5f828152602081815260408083206001600160a01b038516845290915281205460ff166103d1575f838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556103893390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016101fe565b505f6101fe565b5f828152602081815260408083206001600160a01b038516845290915281205460ff16156103d1575f838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016101fe565b5f828152602081815260408083206001600160a01b038516845290915290205460ff166104c8576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024810183905260440160405180910390fd5b5050565b5f602082840312156104dc575f5ffd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461050b575f5ffd5b9392505050565b5f60208284031215610522575f5ffd5b5035919050565b80356001600160a01b038116811461053f575f5ffd5b919050565b5f5f60408385031215610555575f5ffd5b8235915061056560208401610529565b90509250929050565b5f5f5f5f60808587031215610581575f5ffd5b8435935061059160208601610529565b9396939550505050604082013591606001359056fea26469706673582212204cf9d8ecded32c4ea33f896da21d79fe80b723320a0f626352c8ad8b1b79db1d64736f6c634300081c0033",
      "deployedBytecode": "0x608060405234801561000f575f5ffd5b5060043610610085575f3560e01c80635f4717fe116100585780635f4717fe1461010957806391d148541461011c578063a217fddf14610152578063d547741f14610159575f5ffd5b806301ffc9a714610089578063248a9ca3146100b15780632f2ff15d146100e157806336568abe146100f6575b5f5ffd5b61009c6100973660046104cc565b61016c565b60405190151581526020015b60405180910390f35b6100d36100bf366004610512565b5f9081526020819052604090206001015490565b6040519081526020016100a8565b6100f46100ef366004610544565b610204565b005b6100f4610104366004610544565b61022e565b6100f461011736600461056e565b61027f565b61009c61012a366004610544565b5f918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6100d35f81565b6100f4610167366004610544565b610300565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806101fe57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b5f8281526020819052604090206001015461021e81610324565b6102288383610331565b50505050565b6001600160a01b0381163314610270576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61027a82826103d8565b505050565b7f6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa886102a981610324565b604080518681526001600160a01b0386166020820152908101849052606081018390527f369ef82f66eadde18e1bbf5e74404786f74da46573b0a7c36a5faa128cb1d3fe9060800160405180910390a15050505050565b5f8281526020819052604090206001015461031a81610324565b61022883836103d8565b61032e8133610459565b50565b5f828152602081815260408083206001600160a01b038516845290915281205460ff166103d1575f838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556103893390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016101fe565b505f6101fe565b5f828152602081815260408083206001600160a01b038516845290915281205460ff16156103d1575f838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016101fe565b5f828152602081815260408083206001600160a01b038516845290915290205460ff166104c8576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024810183905260440160405180910390fd5b5050565b5f602082840312156104dc575f5ffd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461050b575f5ffd5b9392505050565b5f60208284031215610522575f5ffd5b5035919050565b80356001600160a01b038116811461053f575f5ffd5b919050565b5f5f60408385031215610555575f5ffd5b8235915061056560208401610529565b90509250929050565b5f5f5f5f60808587031215610581575f5ffd5b8435935061059160208601610529565b9396939550505050604082013591606001359056fea26469706673582212204cf9d8ecded32c4ea33f896da21d79fe80b723320a0f626352c8ad8b1b79db1d64736f6c634300081c0033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "errors": {
          "AccessControlBadConfirmation()": [
            {
              "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
            }
          ],
          "AccessControlUnauthorizedAccount(address,bytes32)": [
            {
              "details": "The `account` is missing a role."
            }
          ]
        },
        "events": {
          "RoleAdminChanged(bytes32,bytes32,bytes32)": {
            "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
          },
          "RoleGranted(bytes32,address,address)": {
            "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
          },
          "RoleRevoked(bytes32,address,address)": {
            "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
          }
        },
        "kind": "dev",
        "methods": {
          "getRoleAdmin(bytes32)": {
            "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
          },
          "grantRole(bytes32,address)": {
            "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
          },
          "hasRole(bytes32,address)": {
            "details": "Returns `true` if `account` has been granted `role`."
          },
          "renounceRole(bytes32,address)": {
            "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
          },
          "revokeRole(bytes32,address)": {
            "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
          },
          "supportsInterface(bytes4)": {
            "details": "See {IERC165-supportsInterface}."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_1650": {
              "entryPoint": null,
              "id": 1650,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_grantRole_256": {
              "entryPoint": 75,
              "id": 256,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_msgSender_390": {
              "entryPoint": null,
              "id": 390,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@hasRole_80": {
              "entryPoint": null,
              "id": 80,
              "parameterSlots": 2,
              "returnSlots": 1
            }
          },
          "generatedSources": [],
          "linkReferences": {},
          "object": "608060405234801561000f575f5ffd5b5061001a5f3361004b565b506100457f6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa883361004b565b506100f4565b5f828152602081815260408083206001600160a01b038516845290915281205460ff166100eb575f838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556100a33390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016100ee565b505f5b92915050565b6105dc806101015f395ff3fe608060405234801561000f575f5ffd5b5060043610610085575f3560e01c80635f4717fe116100585780635f4717fe1461010957806391d148541461011c578063a217fddf14610152578063d547741f14610159575f5ffd5b806301ffc9a714610089578063248a9ca3146100b15780632f2ff15d146100e157806336568abe146100f6575b5f5ffd5b61009c6100973660046104cc565b61016c565b60405190151581526020015b60405180910390f35b6100d36100bf366004610512565b5f9081526020819052604090206001015490565b6040519081526020016100a8565b6100f46100ef366004610544565b610204565b005b6100f4610104366004610544565b61022e565b6100f461011736600461056e565b61027f565b61009c61012a366004610544565b5f918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6100d35f81565b6100f4610167366004610544565b610300565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806101fe57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b5f8281526020819052604090206001015461021e81610324565b6102288383610331565b50505050565b6001600160a01b0381163314610270576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61027a82826103d8565b505050565b7f6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa886102a981610324565b604080518681526001600160a01b0386166020820152908101849052606081018390527f369ef82f66eadde18e1bbf5e74404786f74da46573b0a7c36a5faa128cb1d3fe9060800160405180910390a15050505050565b5f8281526020819052604090206001015461031a81610324565b61022883836103d8565b61032e8133610459565b50565b5f828152602081815260408083206001600160a01b038516845290915281205460ff166103d1575f838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556103893390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016101fe565b505f6101fe565b5f828152602081815260408083206001600160a01b038516845290915281205460ff16156103d1575f838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016101fe565b5f828152602081815260408083206001600160a01b038516845290915290205460ff166104c8576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024810183905260440160405180910390fd5b5050565b5f602082840312156104dc575f5ffd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461050b575f5ffd5b9392505050565b5f60208284031215610522575f5ffd5b5035919050565b80356001600160a01b038116811461053f575f5ffd5b919050565b5f5f60408385031215610555575f5ffd5b8235915061056560208401610529565b90509250929050565b5f5f5f5f60808587031215610581575f5ffd5b8435935061059160208601610529565b9396939550505050604082013591606001359056fea26469706673582212204cf9d8ecded32c4ea33f896da21d79fe80b723320a0f626352c8ad8b1b79db1d64736f6c634300081c0033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x1A PUSH0 CALLER PUSH2 0x4B JUMP JUMPDEST POP PUSH2 0x45 PUSH32 0x6A64BAF327D646D1BCA72653E2A075D15FD6AC6D8CBD7F6EE03FC55875E0FA88 CALLER PUSH2 0x4B JUMP JUMPDEST POP PUSH2 0xF4 JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xEB JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xA3 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0xEE JUMP JUMPDEST POP PUSH0 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x5DC DUP1 PUSH2 0x101 PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x85 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5F4717FE GT PUSH2 0x58 JUMPI DUP1 PUSH4 0x5F4717FE EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x159 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0xB1 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0xE1 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0xF6 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x9C PUSH2 0x97 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC JUMP JUMPDEST PUSH2 0x16C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD3 PUSH2 0xBF CALLDATASIZE PUSH1 0x4 PUSH2 0x512 JUMP JUMPDEST PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA8 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0xEF CALLDATASIZE PUSH1 0x4 PUSH2 0x544 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF4 PUSH2 0x104 CALLDATASIZE PUSH1 0x4 PUSH2 0x544 JUMP JUMPDEST PUSH2 0x22E JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x117 CALLDATASIZE PUSH1 0x4 PUSH2 0x56E JUMP JUMPDEST PUSH2 0x27F JUMP JUMPDEST PUSH2 0x9C PUSH2 0x12A CALLDATASIZE PUSH1 0x4 PUSH2 0x544 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0xD3 PUSH0 DUP2 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x167 CALLDATASIZE PUSH1 0x4 PUSH2 0x544 JUMP JUMPDEST PUSH2 0x300 JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x1FE JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x21E DUP2 PUSH2 0x324 JUMP JUMPDEST PUSH2 0x228 DUP4 DUP4 PUSH2 0x331 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x270 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6697B23200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x27A DUP3 DUP3 PUSH2 0x3D8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0x6A64BAF327D646D1BCA72653E2A075D15FD6AC6D8CBD7F6EE03FC55875E0FA88 PUSH2 0x2A9 DUP2 PUSH2 0x324 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x369EF82F66EADDE18E1BBF5E74404786F74DA46573B0A7C36A5FAA128CB1D3FE SWAP1 PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x31A DUP2 PUSH2 0x324 JUMP JUMPDEST PUSH2 0x228 DUP4 DUP4 PUSH2 0x3D8 JUMP JUMPDEST PUSH2 0x32E DUP2 CALLER PUSH2 0x459 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x3D1 JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x389 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x1FE JUMP JUMPDEST POP PUSH0 PUSH2 0x1FE JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x3D1 JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP7 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x1FE JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x4C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE2517D3F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4DC JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x50B JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x522 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x53F JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x555 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x565 PUSH1 0x20 DUP5 ADD PUSH2 0x529 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x581 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH2 0x591 PUSH1 0x20 DUP7 ADD PUSH2 0x529 JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4C 0xF9 0xD8 0xEC 0xDE 0xD3 0x2C 0x4E LOG3 EXTCODEHASH DUP10 PUSH14 0xA21D79FE80B723320A0F626352C8 0xAD DUP12 SHL PUSH26 0xDB1D64736F6C634300081C003300000000000000000000000000 ",
          "sourceMap": "118:787:8:-:0;;;562:116;;;;;;;;;-1:-1:-1;586:42:8;2232:4:0;617:10:8;586;:42::i;:::-;-1:-1:-1;638:33:8;199:22;660:10;638;:33::i;:::-;;118:787;;6179:316:0;6256:4;2954:12;;;;;;;;;;;-1:-1:-1;;;;;2954:29:0;;;;;;;;;;;;6272:217;;6315:6;:12;;;;;;;;;;;-1:-1:-1;;;;;6315:29:0;;;;;;;;;:36;;-1:-1:-1;;6315:36:0;6347:4;6315:36;;;6397:12;735:10:2;;656:96;6397:12:0;-1:-1:-1;;;;;6370:40:0;6388:7;-1:-1:-1;;;;;6370:40:0;6382:4;6370:40;;;;;;;;;;-1:-1:-1;6431:4:0;6424:11;;6272:217;-1:-1:-1;6473:5:0;6272:217;6179:316;;;;:::o;118:787:8:-;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@DEFAULT_ADMIN_ROLE_29": {
              "entryPoint": null,
              "id": 29,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_checkRole_114": {
              "entryPoint": 1113,
              "id": 114,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_checkRole_93": {
              "entryPoint": 804,
              "id": 93,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_grantRole_256": {
              "entryPoint": 817,
              "id": 256,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_msgSender_390": {
              "entryPoint": null,
              "id": 390,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_revokeRole_294": {
              "entryPoint": 984,
              "id": 294,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@getRoleAdmin_128": {
              "entryPoint": null,
              "id": 128,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@grantRole_147": {
              "entryPoint": 516,
              "id": 147,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@hasRole_80": {
              "entryPoint": null,
              "id": 80,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@newPoint_1672": {
              "entryPoint": 639,
              "id": 1672,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@renounceRole_189": {
              "entryPoint": 558,
              "id": 189,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@revokeRole_166": {
              "entryPoint": 768,
              "id": 166,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@supportsInterface_548": {
              "entryPoint": null,
              "id": 548,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_62": {
              "entryPoint": 364,
              "id": 62,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_address": {
              "entryPoint": 1321,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes32": {
              "entryPoint": 1298,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes32t_address": {
              "entryPoint": 1348,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bytes4": {
              "entryPoint": 1228,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256t_addresst_uint256t_uint256": {
              "entryPoint": 1390,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_address_t_uint256_t_uint256__to_t_uint256_t_address_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nativeSrc": "0:2752:11",
                "nodeType": "YulBlock",
                "src": "0:2752:11",
                "statements": [
                  {
                    "nativeSrc": "6:3:11",
                    "nodeType": "YulBlock",
                    "src": "6:3:11",
                    "statements": []
                  },
                  {
                    "body": {
                      "nativeSrc": "83:263:11",
                      "nodeType": "YulBlock",
                      "src": "83:263:11",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "129:16:11",
                            "nodeType": "YulBlock",
                            "src": "129:16:11",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "138:1:11",
                                      "nodeType": "YulLiteral",
                                      "src": "138:1:11",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "141:1:11",
                                      "nodeType": "YulLiteral",
                                      "src": "141:1:11",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "131:6:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "131:6:11"
                                  },
                                  "nativeSrc": "131:12:11",
                                  "nodeType": "YulFunctionCall",
                                  "src": "131:12:11"
                                },
                                "nativeSrc": "131:12:11",
                                "nodeType": "YulExpressionStatement",
                                "src": "131:12:11"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "104:7:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "104:7:11"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "113:9:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "113:9:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "100:3:11",
                                  "nodeType": "YulIdentifier",
                                  "src": "100:3:11"
                                },
                                "nativeSrc": "100:23:11",
                                "nodeType": "YulFunctionCall",
                                "src": "100:23:11"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "125:2:11",
                                "nodeType": "YulLiteral",
                                "src": "125:2:11",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "96:3:11",
                              "nodeType": "YulIdentifier",
                              "src": "96:3:11"
                            },
                            "nativeSrc": "96:32:11",
                            "nodeType": "YulFunctionCall",
                            "src": "96:32:11"
                          },
                          "nativeSrc": "93:52:11",
                          "nodeType": "YulIf",
                          "src": "93:52:11"
                        },
                        {
                          "nativeSrc": "154:36:11",
                          "nodeType": "YulVariableDeclaration",
                          "src": "154:36:11",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "180:9:11",
                                "nodeType": "YulIdentifier",
                                "src": "180:9:11"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "167:12:11",
                              "nodeType": "YulIdentifier",
                              "src": "167:12:11"
                            },
                            "nativeSrc": "167:23:11",
                            "nodeType": "YulFunctionCall",
                            "src": "167:23:11"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nativeSrc": "158:5:11",
                              "nodeType": "YulTypedName",
                              "src": "158:5:11",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "300:16:11",
                            "nodeType": "YulBlock",
                            "src": "300:16:11",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "309:1:11",
                                      "nodeType": "YulLiteral",
                                      "src": "309:1:11",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "312:1:11",
                                      "nodeType": "YulLiteral",
                                      "src": "312:1:11",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "302:6:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "302:6:11"
                                  },
                                  "nativeSrc": "302:12:11",
                                  "nodeType": "YulFunctionCall",
                                  "src": "302:12:11"
                                },
                                "nativeSrc": "302:12:11",
                                "nodeType": "YulExpressionStatement",
                                "src": "302:12:11"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "212:5:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "212:5:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "223:5:11",
                                        "nodeType": "YulIdentifier",
                                        "src": "223:5:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "230:66:11",
                                        "nodeType": "YulLiteral",
                                        "src": "230:66:11",
                                        "type": "",
                                        "value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "219:3:11",
                                      "nodeType": "YulIdentifier",
                                      "src": "219:3:11"
                                    },
                                    "nativeSrc": "219:78:11",
                                    "nodeType": "YulFunctionCall",
                                    "src": "219:78:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "209:2:11",
                                  "nodeType": "YulIdentifier",
                                  "src": "209:2:11"
                                },
                                "nativeSrc": "209:89:11",
                                "nodeType": "YulFunctionCall",
                                "src": "209:89:11"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "202:6:11",
                              "nodeType": "YulIdentifier",
                              "src": "202:6:11"
                            },
                            "nativeSrc": "202:97:11",
                            "nodeType": "YulFunctionCall",
                            "src": "202:97:11"
                          },
                          "nativeSrc": "199:117:11",
                          "nodeType": "YulIf",
                          "src": "199:117:11"
                        },
                        {
                          "nativeSrc": "325:15:11",
                          "nodeType": "YulAssignment",
                          "src": "325:15:11",
                          "value": {
                            "name": "value",
                            "nativeSrc": "335:5:11",
                            "nodeType": "YulIdentifier",
                            "src": "335:5:11"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "325:6:11",
                              "nodeType": "YulIdentifier",
                              "src": "325:6:11"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4",
                    "nativeSrc": "14:332:11",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "49:9:11",
                        "nodeType": "YulTypedName",
                        "src": "49:9:11",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "60:7:11",
                        "nodeType": "YulTypedName",
                        "src": "60:7:11",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "72:6:11",
                        "nodeType": "YulTypedName",
                        "src": "72:6:11",
                        "type": ""
                      }
                    ],
                    "src": "14:332:11"
                  },
                  {
                    "body": {
                      "nativeSrc": "446:92:11",
                      "nodeType": "YulBlock",
                      "src": "446:92:11",
                      "statements": [
                        {
                          "nativeSrc": "456:26:11",
                          "nodeType": "YulAssignment",
                          "src": "456:26:11",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "468:9:11",
                                "nodeType": "YulIdentifier",
                                "src": "468:9:11"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "479:2:11",
                                "nodeType": "YulLiteral",
                                "src": "479:2:11",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "464:3:11",
                              "nodeType": "YulIdentifier",
                              "src": "464:3:11"
                            },
                            "nativeSrc": "464:18:11",
                            "nodeType": "YulFunctionCall",
                            "src": "464:18:11"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "456:4:11",
                              "nodeType": "YulIdentifier",
                              "src": "456:4:11"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "498:9:11",
                                "nodeType": "YulIdentifier",
                                "src": "498:9:11"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "523:6:11",
                                        "nodeType": "YulIdentifier",
                                        "src": "523:6:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nativeSrc": "516:6:11",
                                      "nodeType": "YulIdentifier",
                                      "src": "516:6:11"
                                    },
                                    "nativeSrc": "516:14:11",
                                    "nodeType": "YulFunctionCall",
                                    "src": "516:14:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "509:6:11",
                                  "nodeType": "YulIdentifier",
                                  "src": "509:6:11"
                                },
                                "nativeSrc": "509:22:11",
                                "nodeType": "YulFunctionCall",
                                "src": "509:22:11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "491:6:11",
                              "nodeType": "YulIdentifier",
                              "src": "491:6:11"
                            },
                            "nativeSrc": "491:41:11",
                            "nodeType": "YulFunctionCall",
                            "src": "491:41:11"
                          },
                          "nativeSrc": "491:41:11",
                          "nodeType": "YulExpressionStatement",
                          "src": "491:41:11"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nativeSrc": "351:187:11",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "415:9:11",
                        "nodeType": "YulTypedName",
                        "src": "415:9:11",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "426:6:11",
                        "nodeType": "YulTypedName",
                        "src": "426:6:11",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "437:4:11",
                        "nodeType": "YulTypedName",
                        "src": "437:4:11",
                        "type": ""
                      }
                    ],
                    "src": "351:187:11"
                  },
                  {
                    "body": {
                      "nativeSrc": "613:156:11",
                      "nodeType": "YulBlock",
                      "src": "613:156:11",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "659:16:11",
                            "nodeType": "YulBlock",
                            "src": "659:16:11",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "668:1:11",
                                      "nodeType": "YulLiteral",
                                      "src": "668:1:11",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "671:1:11",
                                      "nodeType": "YulLiteral",
                                      "src": "671:1:11",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "661:6:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "661:6:11"
                                  },
                                  "nativeSrc": "661:12:11",
                                  "nodeType": "YulFunctionCall",
                                  "src": "661:12:11"
                                },
                                "nativeSrc": "661:12:11",
                                "nodeType": "YulExpressionStatement",
                                "src": "661:12:11"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "634:7:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "634:7:11"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "643:9:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "643:9:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "630:3:11",
                                  "nodeType": "YulIdentifier",
                                  "src": "630:3:11"
                                },
                                "nativeSrc": "630:23:11",
                                "nodeType": "YulFunctionCall",
                                "src": "630:23:11"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "655:2:11",
                                "nodeType": "YulLiteral",
                                "src": "655:2:11",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "626:3:11",
                              "nodeType": "YulIdentifier",
                              "src": "626:3:11"
                            },
                            "nativeSrc": "626:32:11",
                            "nodeType": "YulFunctionCall",
                            "src": "626:32:11"
                          },
                          "nativeSrc": "623:52:11",
                          "nodeType": "YulIf",
                          "src": "623:52:11"
                        },
                        {
                          "nativeSrc": "684:14:11",
                          "nodeType": "YulVariableDeclaration",
                          "src": "684:14:11",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "697:1:11",
                            "nodeType": "YulLiteral",
                            "src": "697:1:11",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nativeSrc": "688:5:11",
                              "nodeType": "YulTypedName",
                              "src": "688:5:11",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "707:32:11",
                          "nodeType": "YulAssignment",
                          "src": "707:32:11",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "729:9:11",
                                "nodeType": "YulIdentifier",
                                "src": "729:9:11"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "716:12:11",
                              "nodeType": "YulIdentifier",
                              "src": "716:12:11"
                            },
                            "nativeSrc": "716:23:11",
                            "nodeType": "YulFunctionCall",
                            "src": "716:23:11"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "707:5:11",
                              "nodeType": "YulIdentifier",
                              "src": "707:5:11"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "748:15:11",
                          "nodeType": "YulAssignment",
                          "src": "748:15:11",
                          "value": {
                            "name": "value",
                            "nativeSrc": "758:5:11",
                            "nodeType": "YulIdentifier",
                            "src": "758:5:11"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "748:6:11",
                              "nodeType": "YulIdentifier",
                              "src": "748:6:11"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32",
                    "nativeSrc": "543:226:11",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "579:9:11",
                        "nodeType": "YulTypedName",
                        "src": "579:9:11",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "590:7:11",
                        "nodeType": "YulTypedName",
                        "src": "590:7:11",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "602:6:11",
                        "nodeType": "YulTypedName",
                        "src": "602:6:11",
                        "type": ""
                      }
                    ],
                    "src": "543:226:11"
                  },
                  {
                    "body": {
                      "nativeSrc": "875:76:11",
                      "nodeType": "YulBlock",
                      "src": "875:76:11",
                      "statements": [
                        {
                          "nativeSrc": "885:26:11",
                          "nodeType": "YulAssignment",
                          "src": "885:26:11",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "897:9:11",
                                "nodeType": "YulIdentifier",
                                "src": "897:9:11"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "908:2:11",
                                "nodeType": "YulLiteral",
                                "src": "908:2:11",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "893:3:11",
                              "nodeType": "YulIdentifier",
                              "src": "893:3:11"
                            },
                            "nativeSrc": "893:18:11",
                            "nodeType": "YulFunctionCall",
                            "src": "893:18:11"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "885:4:11",
                              "nodeType": "YulIdentifier",
                              "src": "885:4:11"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "927:9:11",
                                "nodeType": "YulIdentifier",
                                "src": "927:9:11"
                              },
                              {
                                "name": "value0",
                                "nativeSrc": "938:6:11",
                                "nodeType": "YulIdentifier",
                                "src": "938:6:11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "920:6:11",
                              "nodeType": "YulIdentifier",
                              "src": "920:6:11"
                            },
                            "nativeSrc": "920:25:11",
                            "nodeType": "YulFunctionCall",
                            "src": "920:25:11"
                          },
                          "nativeSrc": "920:25:11",
                          "nodeType": "YulExpressionStatement",
                          "src": "920:25:11"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                    "nativeSrc": "774:177:11",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "844:9:11",
                        "nodeType": "YulTypedName",
                        "src": "844:9:11",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "855:6:11",
                        "nodeType": "YulTypedName",
                        "src": "855:6:11",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "866:4:11",
                        "nodeType": "YulTypedName",
                        "src": "866:4:11",
                        "type": ""
                      }
                    ],
                    "src": "774:177:11"
                  },
                  {
                    "body": {
                      "nativeSrc": "1005:147:11",
                      "nodeType": "YulBlock",
                      "src": "1005:147:11",
                      "statements": [
                        {
                          "nativeSrc": "1015:29:11",
                          "nodeType": "YulAssignment",
                          "src": "1015:29:11",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "1037:6:11",
                                "nodeType": "YulIdentifier",
                                "src": "1037:6:11"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "1024:12:11",
                              "nodeType": "YulIdentifier",
                              "src": "1024:12:11"
                            },
                            "nativeSrc": "1024:20:11",
                            "nodeType": "YulFunctionCall",
                            "src": "1024:20:11"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "1015:5:11",
                              "nodeType": "YulIdentifier",
                              "src": "1015:5:11"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "1130:16:11",
                            "nodeType": "YulBlock",
                            "src": "1130:16:11",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1139:1:11",
                                      "nodeType": "YulLiteral",
                                      "src": "1139:1:11",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1142:1:11",
                                      "nodeType": "YulLiteral",
                                      "src": "1142:1:11",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "1132:6:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "1132:6:11"
                                  },
                                  "nativeSrc": "1132:12:11",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1132:12:11"
                                },
                                "nativeSrc": "1132:12:11",
                                "nodeType": "YulExpressionStatement",
                                "src": "1132:12:11"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "1066:5:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "1066:5:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "1077:5:11",
                                        "nodeType": "YulIdentifier",
                                        "src": "1077:5:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "1084:42:11",
                                        "nodeType": "YulLiteral",
                                        "src": "1084:42:11",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "1073:3:11",
                                      "nodeType": "YulIdentifier",
                                      "src": "1073:3:11"
                                    },
                                    "nativeSrc": "1073:54:11",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1073:54:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "1063:2:11",
                                  "nodeType": "YulIdentifier",
                                  "src": "1063:2:11"
                                },
                                "nativeSrc": "1063:65:11",
                                "nodeType": "YulFunctionCall",
                                "src": "1063:65:11"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "1056:6:11",
                              "nodeType": "YulIdentifier",
                              "src": "1056:6:11"
                            },
                            "nativeSrc": "1056:73:11",
                            "nodeType": "YulFunctionCall",
                            "src": "1056:73:11"
                          },
                          "nativeSrc": "1053:93:11",
                          "nodeType": "YulIf",
                          "src": "1053:93:11"
                        }
                      ]
                    },
                    "name": "abi_decode_address",
                    "nativeSrc": "956:196:11",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "984:6:11",
                        "nodeType": "YulTypedName",
                        "src": "984:6:11",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "995:5:11",
                        "nodeType": "YulTypedName",
                        "src": "995:5:11",
                        "type": ""
                      }
                    ],
                    "src": "956:196:11"
                  },
                  {
                    "body": {
                      "nativeSrc": "1244:213:11",
                      "nodeType": "YulBlock",
                      "src": "1244:213:11",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "1290:16:11",
                            "nodeType": "YulBlock",
                            "src": "1290:16:11",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1299:1:11",
                                      "nodeType": "YulLiteral",
                                      "src": "1299:1:11",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1302:1:11",
                                      "nodeType": "YulLiteral",
                                      "src": "1302:1:11",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "1292:6:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "1292:6:11"
                                  },
                                  "nativeSrc": "1292:12:11",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1292:12:11"
                                },
                                "nativeSrc": "1292:12:11",
                                "nodeType": "YulExpressionStatement",
                                "src": "1292:12:11"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "1265:7:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "1265:7:11"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1274:9:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "1274:9:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "1261:3:11",
                                  "nodeType": "YulIdentifier",
                                  "src": "1261:3:11"
                                },
                                "nativeSrc": "1261:23:11",
                                "nodeType": "YulFunctionCall",
                                "src": "1261:23:11"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1286:2:11",
                                "nodeType": "YulLiteral",
                                "src": "1286:2:11",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "1257:3:11",
                              "nodeType": "YulIdentifier",
                              "src": "1257:3:11"
                            },
                            "nativeSrc": "1257:32:11",
                            "nodeType": "YulFunctionCall",
                            "src": "1257:32:11"
                          },
                          "nativeSrc": "1254:52:11",
                          "nodeType": "YulIf",
                          "src": "1254:52:11"
                        },
                        {
                          "nativeSrc": "1315:14:11",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1315:14:11",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "1328:1:11",
                            "nodeType": "YulLiteral",
                            "src": "1328:1:11",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nativeSrc": "1319:5:11",
                              "nodeType": "YulTypedName",
                              "src": "1319:5:11",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1338:32:11",
                          "nodeType": "YulAssignment",
                          "src": "1338:32:11",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1360:9:11",
                                "nodeType": "YulIdentifier",
                                "src": "1360:9:11"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "1347:12:11",
                              "nodeType": "YulIdentifier",
                              "src": "1347:12:11"
                            },
                            "nativeSrc": "1347:23:11",
                            "nodeType": "YulFunctionCall",
                            "src": "1347:23:11"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "1338:5:11",
                              "nodeType": "YulIdentifier",
                              "src": "1338:5:11"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1379:15:11",
                          "nodeType": "YulAssignment",
                          "src": "1379:15:11",
                          "value": {
                            "name": "value",
                            "nativeSrc": "1389:5:11",
                            "nodeType": "YulIdentifier",
                            "src": "1389:5:11"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "1379:6:11",
                              "nodeType": "YulIdentifier",
                              "src": "1379:6:11"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1403:48:11",
                          "nodeType": "YulAssignment",
                          "src": "1403:48:11",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1436:9:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "1436:9:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1447:2:11",
                                    "nodeType": "YulLiteral",
                                    "src": "1447:2:11",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1432:3:11",
                                  "nodeType": "YulIdentifier",
                                  "src": "1432:3:11"
                                },
                                "nativeSrc": "1432:18:11",
                                "nodeType": "YulFunctionCall",
                                "src": "1432:18:11"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nativeSrc": "1413:18:11",
                              "nodeType": "YulIdentifier",
                              "src": "1413:18:11"
                            },
                            "nativeSrc": "1413:38:11",
                            "nodeType": "YulFunctionCall",
                            "src": "1413:38:11"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nativeSrc": "1403:6:11",
                              "nodeType": "YulIdentifier",
                              "src": "1403:6:11"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32t_address",
                    "nativeSrc": "1157:300:11",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "1202:9:11",
                        "nodeType": "YulTypedName",
                        "src": "1202:9:11",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "1213:7:11",
                        "nodeType": "YulTypedName",
                        "src": "1213:7:11",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "1225:6:11",
                        "nodeType": "YulTypedName",
                        "src": "1225:6:11",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "1233:6:11",
                        "nodeType": "YulTypedName",
                        "src": "1233:6:11",
                        "type": ""
                      }
                    ],
                    "src": "1157:300:11"
                  },
                  {
                    "body": {
                      "nativeSrc": "1583:420:11",
                      "nodeType": "YulBlock",
                      "src": "1583:420:11",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "1630:16:11",
                            "nodeType": "YulBlock",
                            "src": "1630:16:11",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1639:1:11",
                                      "nodeType": "YulLiteral",
                                      "src": "1639:1:11",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1642:1:11",
                                      "nodeType": "YulLiteral",
                                      "src": "1642:1:11",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "1632:6:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "1632:6:11"
                                  },
                                  "nativeSrc": "1632:12:11",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1632:12:11"
                                },
                                "nativeSrc": "1632:12:11",
                                "nodeType": "YulExpressionStatement",
                                "src": "1632:12:11"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "1604:7:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "1604:7:11"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1613:9:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "1613:9:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "1600:3:11",
                                  "nodeType": "YulIdentifier",
                                  "src": "1600:3:11"
                                },
                                "nativeSrc": "1600:23:11",
                                "nodeType": "YulFunctionCall",
                                "src": "1600:23:11"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1625:3:11",
                                "nodeType": "YulLiteral",
                                "src": "1625:3:11",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "1596:3:11",
                              "nodeType": "YulIdentifier",
                              "src": "1596:3:11"
                            },
                            "nativeSrc": "1596:33:11",
                            "nodeType": "YulFunctionCall",
                            "src": "1596:33:11"
                          },
                          "nativeSrc": "1593:53:11",
                          "nodeType": "YulIf",
                          "src": "1593:53:11"
                        },
                        {
                          "nativeSrc": "1655:14:11",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1655:14:11",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "1668:1:11",
                            "nodeType": "YulLiteral",
                            "src": "1668:1:11",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nativeSrc": "1659:5:11",
                              "nodeType": "YulTypedName",
                              "src": "1659:5:11",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1678:32:11",
                          "nodeType": "YulAssignment",
                          "src": "1678:32:11",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1700:9:11",
                                "nodeType": "YulIdentifier",
                                "src": "1700:9:11"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "1687:12:11",
                              "nodeType": "YulIdentifier",
                              "src": "1687:12:11"
                            },
                            "nativeSrc": "1687:23:11",
                            "nodeType": "YulFunctionCall",
                            "src": "1687:23:11"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "1678:5:11",
                              "nodeType": "YulIdentifier",
                              "src": "1678:5:11"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1719:15:11",
                          "nodeType": "YulAssignment",
                          "src": "1719:15:11",
                          "value": {
                            "name": "value",
                            "nativeSrc": "1729:5:11",
                            "nodeType": "YulIdentifier",
                            "src": "1729:5:11"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "1719:6:11",
                              "nodeType": "YulIdentifier",
                              "src": "1719:6:11"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1743:48:11",
                          "nodeType": "YulAssignment",
                          "src": "1743:48:11",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1776:9:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "1776:9:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1787:2:11",
                                    "nodeType": "YulLiteral",
                                    "src": "1787:2:11",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1772:3:11",
                                  "nodeType": "YulIdentifier",
                                  "src": "1772:3:11"
                                },
                                "nativeSrc": "1772:18:11",
                                "nodeType": "YulFunctionCall",
                                "src": "1772:18:11"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nativeSrc": "1753:18:11",
                              "nodeType": "YulIdentifier",
                              "src": "1753:18:11"
                            },
                            "nativeSrc": "1753:38:11",
                            "nodeType": "YulFunctionCall",
                            "src": "1753:38:11"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nativeSrc": "1743:6:11",
                              "nodeType": "YulIdentifier",
                              "src": "1743:6:11"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1800:16:11",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1800:16:11",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "1815:1:11",
                            "nodeType": "YulLiteral",
                            "src": "1815:1:11",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nativeSrc": "1804:7:11",
                              "nodeType": "YulTypedName",
                              "src": "1804:7:11",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1825:43:11",
                          "nodeType": "YulAssignment",
                          "src": "1825:43:11",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1853:9:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "1853:9:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1864:2:11",
                                    "nodeType": "YulLiteral",
                                    "src": "1864:2:11",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1849:3:11",
                                  "nodeType": "YulIdentifier",
                                  "src": "1849:3:11"
                                },
                                "nativeSrc": "1849:18:11",
                                "nodeType": "YulFunctionCall",
                                "src": "1849:18:11"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "1836:12:11",
                              "nodeType": "YulIdentifier",
                              "src": "1836:12:11"
                            },
                            "nativeSrc": "1836:32:11",
                            "nodeType": "YulFunctionCall",
                            "src": "1836:32:11"
                          },
                          "variableNames": [
                            {
                              "name": "value_1",
                              "nativeSrc": "1825:7:11",
                              "nodeType": "YulIdentifier",
                              "src": "1825:7:11"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1877:17:11",
                          "nodeType": "YulAssignment",
                          "src": "1877:17:11",
                          "value": {
                            "name": "value_1",
                            "nativeSrc": "1887:7:11",
                            "nodeType": "YulIdentifier",
                            "src": "1887:7:11"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nativeSrc": "1877:6:11",
                              "nodeType": "YulIdentifier",
                              "src": "1877:6:11"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1903:16:11",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1903:16:11",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "1918:1:11",
                            "nodeType": "YulLiteral",
                            "src": "1918:1:11",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "value_2",
                              "nativeSrc": "1907:7:11",
                              "nodeType": "YulTypedName",
                              "src": "1907:7:11",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1928:43:11",
                          "nodeType": "YulAssignment",
                          "src": "1928:43:11",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1956:9:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "1956:9:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1967:2:11",
                                    "nodeType": "YulLiteral",
                                    "src": "1967:2:11",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1952:3:11",
                                  "nodeType": "YulIdentifier",
                                  "src": "1952:3:11"
                                },
                                "nativeSrc": "1952:18:11",
                                "nodeType": "YulFunctionCall",
                                "src": "1952:18:11"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "1939:12:11",
                              "nodeType": "YulIdentifier",
                              "src": "1939:12:11"
                            },
                            "nativeSrc": "1939:32:11",
                            "nodeType": "YulFunctionCall",
                            "src": "1939:32:11"
                          },
                          "variableNames": [
                            {
                              "name": "value_2",
                              "nativeSrc": "1928:7:11",
                              "nodeType": "YulIdentifier",
                              "src": "1928:7:11"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1980:17:11",
                          "nodeType": "YulAssignment",
                          "src": "1980:17:11",
                          "value": {
                            "name": "value_2",
                            "nativeSrc": "1990:7:11",
                            "nodeType": "YulIdentifier",
                            "src": "1990:7:11"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nativeSrc": "1980:6:11",
                              "nodeType": "YulIdentifier",
                              "src": "1980:6:11"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_addresst_uint256t_uint256",
                    "nativeSrc": "1462:541:11",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "1525:9:11",
                        "nodeType": "YulTypedName",
                        "src": "1525:9:11",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "1536:7:11",
                        "nodeType": "YulTypedName",
                        "src": "1536:7:11",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "1548:6:11",
                        "nodeType": "YulTypedName",
                        "src": "1548:6:11",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "1556:6:11",
                        "nodeType": "YulTypedName",
                        "src": "1556:6:11",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "1564:6:11",
                        "nodeType": "YulTypedName",
                        "src": "1564:6:11",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nativeSrc": "1572:6:11",
                        "nodeType": "YulTypedName",
                        "src": "1572:6:11",
                        "type": ""
                      }
                    ],
                    "src": "1462:541:11"
                  },
                  {
                    "body": {
                      "nativeSrc": "2193:255:11",
                      "nodeType": "YulBlock",
                      "src": "2193:255:11",
                      "statements": [
                        {
                          "nativeSrc": "2203:27:11",
                          "nodeType": "YulAssignment",
                          "src": "2203:27:11",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2215:9:11",
                                "nodeType": "YulIdentifier",
                                "src": "2215:9:11"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2226:3:11",
                                "nodeType": "YulLiteral",
                                "src": "2226:3:11",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2211:3:11",
                              "nodeType": "YulIdentifier",
                              "src": "2211:3:11"
                            },
                            "nativeSrc": "2211:19:11",
                            "nodeType": "YulFunctionCall",
                            "src": "2211:19:11"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "2203:4:11",
                              "nodeType": "YulIdentifier",
                              "src": "2203:4:11"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2246:9:11",
                                "nodeType": "YulIdentifier",
                                "src": "2246:9:11"
                              },
                              {
                                "name": "value0",
                                "nativeSrc": "2257:6:11",
                                "nodeType": "YulIdentifier",
                                "src": "2257:6:11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2239:6:11",
                              "nodeType": "YulIdentifier",
                              "src": "2239:6:11"
                            },
                            "nativeSrc": "2239:25:11",
                            "nodeType": "YulFunctionCall",
                            "src": "2239:25:11"
                          },
                          "nativeSrc": "2239:25:11",
                          "nodeType": "YulExpressionStatement",
                          "src": "2239:25:11"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2284:9:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "2284:9:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2295:2:11",
                                    "nodeType": "YulLiteral",
                                    "src": "2295:2:11",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2280:3:11",
                                  "nodeType": "YulIdentifier",
                                  "src": "2280:3:11"
                                },
                                "nativeSrc": "2280:18:11",
                                "nodeType": "YulFunctionCall",
                                "src": "2280:18:11"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nativeSrc": "2304:6:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "2304:6:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2312:42:11",
                                    "nodeType": "YulLiteral",
                                    "src": "2312:42:11",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "2300:3:11",
                                  "nodeType": "YulIdentifier",
                                  "src": "2300:3:11"
                                },
                                "nativeSrc": "2300:55:11",
                                "nodeType": "YulFunctionCall",
                                "src": "2300:55:11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2273:6:11",
                              "nodeType": "YulIdentifier",
                              "src": "2273:6:11"
                            },
                            "nativeSrc": "2273:83:11",
                            "nodeType": "YulFunctionCall",
                            "src": "2273:83:11"
                          },
                          "nativeSrc": "2273:83:11",
                          "nodeType": "YulExpressionStatement",
                          "src": "2273:83:11"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2376:9:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "2376:9:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2387:2:11",
                                    "nodeType": "YulLiteral",
                                    "src": "2387:2:11",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2372:3:11",
                                  "nodeType": "YulIdentifier",
                                  "src": "2372:3:11"
                                },
                                "nativeSrc": "2372:18:11",
                                "nodeType": "YulFunctionCall",
                                "src": "2372:18:11"
                              },
                              {
                                "name": "value2",
                                "nativeSrc": "2392:6:11",
                                "nodeType": "YulIdentifier",
                                "src": "2392:6:11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2365:6:11",
                              "nodeType": "YulIdentifier",
                              "src": "2365:6:11"
                            },
                            "nativeSrc": "2365:34:11",
                            "nodeType": "YulFunctionCall",
                            "src": "2365:34:11"
                          },
                          "nativeSrc": "2365:34:11",
                          "nodeType": "YulExpressionStatement",
                          "src": "2365:34:11"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2419:9:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "2419:9:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2430:2:11",
                                    "nodeType": "YulLiteral",
                                    "src": "2430:2:11",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2415:3:11",
                                  "nodeType": "YulIdentifier",
                                  "src": "2415:3:11"
                                },
                                "nativeSrc": "2415:18:11",
                                "nodeType": "YulFunctionCall",
                                "src": "2415:18:11"
                              },
                              {
                                "name": "value3",
                                "nativeSrc": "2435:6:11",
                                "nodeType": "YulIdentifier",
                                "src": "2435:6:11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2408:6:11",
                              "nodeType": "YulIdentifier",
                              "src": "2408:6:11"
                            },
                            "nativeSrc": "2408:34:11",
                            "nodeType": "YulFunctionCall",
                            "src": "2408:34:11"
                          },
                          "nativeSrc": "2408:34:11",
                          "nodeType": "YulExpressionStatement",
                          "src": "2408:34:11"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_address_t_uint256_t_uint256__to_t_uint256_t_address_t_uint256_t_uint256__fromStack_reversed",
                    "nativeSrc": "2008:440:11",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "2138:9:11",
                        "nodeType": "YulTypedName",
                        "src": "2138:9:11",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nativeSrc": "2149:6:11",
                        "nodeType": "YulTypedName",
                        "src": "2149:6:11",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "2157:6:11",
                        "nodeType": "YulTypedName",
                        "src": "2157:6:11",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "2165:6:11",
                        "nodeType": "YulTypedName",
                        "src": "2165:6:11",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "2173:6:11",
                        "nodeType": "YulTypedName",
                        "src": "2173:6:11",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "2184:4:11",
                        "nodeType": "YulTypedName",
                        "src": "2184:4:11",
                        "type": ""
                      }
                    ],
                    "src": "2008:440:11"
                  },
                  {
                    "body": {
                      "nativeSrc": "2582:168:11",
                      "nodeType": "YulBlock",
                      "src": "2582:168:11",
                      "statements": [
                        {
                          "nativeSrc": "2592:26:11",
                          "nodeType": "YulAssignment",
                          "src": "2592:26:11",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2604:9:11",
                                "nodeType": "YulIdentifier",
                                "src": "2604:9:11"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2615:2:11",
                                "nodeType": "YulLiteral",
                                "src": "2615:2:11",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2600:3:11",
                              "nodeType": "YulIdentifier",
                              "src": "2600:3:11"
                            },
                            "nativeSrc": "2600:18:11",
                            "nodeType": "YulFunctionCall",
                            "src": "2600:18:11"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "2592:4:11",
                              "nodeType": "YulIdentifier",
                              "src": "2592:4:11"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2634:9:11",
                                "nodeType": "YulIdentifier",
                                "src": "2634:9:11"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "2649:6:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "2649:6:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2657:42:11",
                                    "nodeType": "YulLiteral",
                                    "src": "2657:42:11",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "2645:3:11",
                                  "nodeType": "YulIdentifier",
                                  "src": "2645:3:11"
                                },
                                "nativeSrc": "2645:55:11",
                                "nodeType": "YulFunctionCall",
                                "src": "2645:55:11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2627:6:11",
                              "nodeType": "YulIdentifier",
                              "src": "2627:6:11"
                            },
                            "nativeSrc": "2627:74:11",
                            "nodeType": "YulFunctionCall",
                            "src": "2627:74:11"
                          },
                          "nativeSrc": "2627:74:11",
                          "nodeType": "YulExpressionStatement",
                          "src": "2627:74:11"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2721:9:11",
                                    "nodeType": "YulIdentifier",
                                    "src": "2721:9:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2732:2:11",
                                    "nodeType": "YulLiteral",
                                    "src": "2732:2:11",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2717:3:11",
                                  "nodeType": "YulIdentifier",
                                  "src": "2717:3:11"
                                },
                                "nativeSrc": "2717:18:11",
                                "nodeType": "YulFunctionCall",
                                "src": "2717:18:11"
                              },
                              {
                                "name": "value1",
                                "nativeSrc": "2737:6:11",
                                "nodeType": "YulIdentifier",
                                "src": "2737:6:11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2710:6:11",
                              "nodeType": "YulIdentifier",
                              "src": "2710:6:11"
                            },
                            "nativeSrc": "2710:34:11",
                            "nodeType": "YulFunctionCall",
                            "src": "2710:34:11"
                          },
                          "nativeSrc": "2710:34:11",
                          "nodeType": "YulExpressionStatement",
                          "src": "2710:34:11"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed",
                    "nativeSrc": "2453:297:11",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "2543:9:11",
                        "nodeType": "YulTypedName",
                        "src": "2543:9:11",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "2554:6:11",
                        "nodeType": "YulTypedName",
                        "src": "2554:6:11",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "2562:6:11",
                        "nodeType": "YulTypedName",
                        "src": "2562:6:11",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "2573:4:11",
                        "nodeType": "YulTypedName",
                        "src": "2573:4:11",
                        "type": ""
                      }
                    ],
                    "src": "2453:297:11"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        value1 := abi_decode_address(add(headStart, 32))\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 64))\n        value2 := value_1\n        let value_2 := 0\n        value_2 := calldataload(add(headStart, 96))\n        value3 := value_2\n    }\n    function abi_encode_tuple_t_uint256_t_address_t_uint256_t_uint256__to_t_uint256_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n}",
              "id": 11,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561000f575f5ffd5b5060043610610085575f3560e01c80635f4717fe116100585780635f4717fe1461010957806391d148541461011c578063a217fddf14610152578063d547741f14610159575f5ffd5b806301ffc9a714610089578063248a9ca3146100b15780632f2ff15d146100e157806336568abe146100f6575b5f5ffd5b61009c6100973660046104cc565b61016c565b60405190151581526020015b60405180910390f35b6100d36100bf366004610512565b5f9081526020819052604090206001015490565b6040519081526020016100a8565b6100f46100ef366004610544565b610204565b005b6100f4610104366004610544565b61022e565b6100f461011736600461056e565b61027f565b61009c61012a366004610544565b5f918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6100d35f81565b6100f4610167366004610544565b610300565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806101fe57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b5f8281526020819052604090206001015461021e81610324565b6102288383610331565b50505050565b6001600160a01b0381163314610270576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61027a82826103d8565b505050565b7f6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa886102a981610324565b604080518681526001600160a01b0386166020820152908101849052606081018390527f369ef82f66eadde18e1bbf5e74404786f74da46573b0a7c36a5faa128cb1d3fe9060800160405180910390a15050505050565b5f8281526020819052604090206001015461031a81610324565b61022883836103d8565b61032e8133610459565b50565b5f828152602081815260408083206001600160a01b038516845290915281205460ff166103d1575f838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556103893390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016101fe565b505f6101fe565b5f828152602081815260408083206001600160a01b038516845290915281205460ff16156103d1575f838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016101fe565b5f828152602081815260408083206001600160a01b038516845290915290205460ff166104c8576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024810183905260440160405180910390fd5b5050565b5f602082840312156104dc575f5ffd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461050b575f5ffd5b9392505050565b5f60208284031215610522575f5ffd5b5035919050565b80356001600160a01b038116811461053f575f5ffd5b919050565b5f5f60408385031215610555575f5ffd5b8235915061056560208401610529565b90509250929050565b5f5f5f5f60808587031215610581575f5ffd5b8435935061059160208601610529565b9396939550505050604082013591606001359056fea26469706673582212204cf9d8ecded32c4ea33f896da21d79fe80b723320a0f626352c8ad8b1b79db1d64736f6c634300081c0033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x85 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5F4717FE GT PUSH2 0x58 JUMPI DUP1 PUSH4 0x5F4717FE EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x159 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0xB1 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0xE1 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0xF6 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x9C PUSH2 0x97 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC JUMP JUMPDEST PUSH2 0x16C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD3 PUSH2 0xBF CALLDATASIZE PUSH1 0x4 PUSH2 0x512 JUMP JUMPDEST PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA8 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0xEF CALLDATASIZE PUSH1 0x4 PUSH2 0x544 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF4 PUSH2 0x104 CALLDATASIZE PUSH1 0x4 PUSH2 0x544 JUMP JUMPDEST PUSH2 0x22E JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x117 CALLDATASIZE PUSH1 0x4 PUSH2 0x56E JUMP JUMPDEST PUSH2 0x27F JUMP JUMPDEST PUSH2 0x9C PUSH2 0x12A CALLDATASIZE PUSH1 0x4 PUSH2 0x544 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0xD3 PUSH0 DUP2 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x167 CALLDATASIZE PUSH1 0x4 PUSH2 0x544 JUMP JUMPDEST PUSH2 0x300 JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x1FE JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x21E DUP2 PUSH2 0x324 JUMP JUMPDEST PUSH2 0x228 DUP4 DUP4 PUSH2 0x331 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x270 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6697B23200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x27A DUP3 DUP3 PUSH2 0x3D8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0x6A64BAF327D646D1BCA72653E2A075D15FD6AC6D8CBD7F6EE03FC55875E0FA88 PUSH2 0x2A9 DUP2 PUSH2 0x324 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x369EF82F66EADDE18E1BBF5E74404786F74DA46573B0A7C36A5FAA128CB1D3FE SWAP1 PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x31A DUP2 PUSH2 0x324 JUMP JUMPDEST PUSH2 0x228 DUP4 DUP4 PUSH2 0x3D8 JUMP JUMPDEST PUSH2 0x32E DUP2 CALLER PUSH2 0x459 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x3D1 JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x389 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x1FE JUMP JUMPDEST POP PUSH0 PUSH2 0x1FE JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x3D1 JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP7 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x1FE JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x4C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE2517D3F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4DC JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x50B JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x522 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x53F JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x555 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x565 PUSH1 0x20 DUP5 ADD PUSH2 0x529 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x581 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH2 0x591 PUSH1 0x20 DUP7 ADD PUSH2 0x529 JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4C 0xF9 0xD8 0xEC 0xDE 0xD3 0x2C 0x4E LOG3 EXTCODEHASH DUP10 PUSH14 0xA21D79FE80B723320A0F626352C8 0xAD DUP12 SHL PUSH26 0xDB1D64736F6C634300081C003300000000000000000000000000 ",
          "sourceMap": "118:787:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2565:202:0;;;;;;:::i;:::-;;:::i;:::-;;;516:14:11;;509:22;491:41;;479:2;464:18;2565:202:0;;;;;;;;3810:120;;;;;;:::i;:::-;3875:7;3901:12;;;;;;;;;;:22;;;;3810:120;;;;920:25:11;;;908:2;893:18;3810:120:0;774:177:11;4226:136:0;;;;;;:::i;:::-;;:::i;:::-;;5328:245;;;;;;:::i;:::-;;:::i;684:219:8:-;;;;;;:::i;:::-;;:::i;2854:136:0:-;;;;;;:::i;:::-;2931:4;2954:12;;;;;;;;;;;-1:-1:-1;;;;;2954:29:0;;;;;;;;;;;;;;;2854:136;2187:49;;2232:4;2187:49;;4642:138;;;;;;:::i;:::-;;:::i;2565:202::-;2650:4;2673:47;;;2688:32;2673:47;;:87;;-1:-1:-1;877:25:4;862:40;;;;2724:36:0;2666:94;2565:202;-1:-1:-1;;2565:202:0:o;4226:136::-;3875:7;3901:12;;;;;;;;;;:22;;;2464:16;2475:4;2464:10;:16::i;:::-;4330:25:::1;4341:4;4347:7;4330:10;:25::i;:::-;;4226:136:::0;;;:::o;5328:245::-;-1:-1:-1;;;;;5421:34:0;;735:10:2;5421:34:0;5417:102;;5478:30;;;;;;;;;;;;;;5417:102;5529:37;5541:4;5547:18;5529:11;:37::i;:::-;;5328:245;;:::o;684:219:8:-;199:22;2464:16:0;2475:4;2464:10;:16::i;:::-;851:45:8::1;::::0;;2239:25:11;;;-1:-1:-1;;;;;2300:55:11;;2295:2;2280:18;;2273:83;2372:18;;;2365:34;;;2430:2;2415:18;;2408:34;;;851:45:8::1;::::0;2226:3:11;2211:19;851:45:8::1;;;;;;;684:219:::0;;;;;:::o;4642:138:0:-;3875:7;3901:12;;;;;;;;;;:22;;;2464:16;2475:4;2464:10;:16::i;:::-;4747:26:::1;4759:4;4765:7;4747:11;:26::i;3199:103::-:0;3265:30;3276:4;735:10:2;3265::0;:30::i;:::-;3199:103;:::o;6179:316::-;6256:4;2954:12;;;;;;;;;;;-1:-1:-1;;;;;2954:29:0;;;;;;;;;;;;6272:217;;6315:6;:12;;;;;;;;;;;-1:-1:-1;;;;;6315:29:0;;;;;;;;;:36;;-1:-1:-1;;6315:36:0;6347:4;6315:36;;;6397:12;735:10:2;;656:96;6397:12:0;-1:-1:-1;;;;;6370:40:0;6388:7;-1:-1:-1;;;;;6370:40:0;6382:4;6370:40;;;;;;;;;;-1:-1:-1;6431:4:0;6424:11;;6272:217;-1:-1:-1;6473:5:0;6466:12;;6730:317;6808:4;2954:12;;;;;;;;;;;-1:-1:-1;;;;;2954:29:0;;;;;;;;;;;;6824:217;;;6898:5;6866:12;;;;;;;;;;;-1:-1:-1;;;;;6866:29:0;;;;;;;;;;:37;;-1:-1:-1;;6866:37:0;;;6922:40;735:10:2;;6866:12:0;;6922:40;;6898:5;6922:40;-1:-1:-1;6983:4:0;6976:11;;3432:197;2931:4;2954:12;;;;;;;;;;;-1:-1:-1;;;;;2954:29:0;;;;;;;;;;;;3515:108;;3565:47;;;;;-1:-1:-1;;;;;2645:55:11;;3565:47:0;;;2627:74:11;2717:18;;;2710:34;;;2600:18;;3565:47:0;;;;;;;3515:108;3432:197;;:::o;14:332:11:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:11:o;543:226::-;602:6;655:2;643:9;634:7;630:23;626:32;623:52;;;671:1;668;661:12;623:52;-1:-1:-1;716:23:11;;543:226;-1:-1:-1;543:226:11:o;956:196::-;1024:20;;-1:-1:-1;;;;;1073:54:11;;1063:65;;1053:93;;1142:1;1139;1132:12;1053:93;956:196;;;:::o;1157:300::-;1225:6;1233;1286:2;1274:9;1265:7;1261:23;1257:32;1254:52;;;1302:1;1299;1292:12;1254:52;1347:23;;;-1:-1:-1;1413:38:11;1447:2;1432:18;;1413:38;:::i;:::-;1403:48;;1157:300;;;;;:::o;1462:541::-;1548:6;1556;1564;1572;1625:3;1613:9;1604:7;1600:23;1596:33;1593:53;;;1642:1;1639;1632:12;1593:53;1687:23;;;-1:-1:-1;1753:38:11;1787:2;1772:18;;1753:38;:::i;:::-;1462:541;;1743:48;;-1:-1:-1;;;;1864:2:11;1849:18;;1836:32;;1967:2;1952:18;1939:32;;1462:541::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "300000",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "DEFAULT_ADMIN_ROLE()": "237",
            "getRoleAdmin(bytes32)": "2467",
            "grantRole(bytes32,address)": "33560",
            "hasRole(bytes32,address)": "2657",
            "newPoint(uint256,address,uint256,uint256)": "4614",
            "renounceRole(bytes32,address)": "29043",
            "revokeRole(bytes32,address)": "33518",
            "supportsInterface(bytes4)": "367"
          }
        },
        "methodIdentifiers": {
          "DEFAULT_ADMIN_ROLE()": "a217fddf",
          "getRoleAdmin(bytes32)": "248a9ca3",
          "grantRole(bytes32,address)": "2f2ff15d",
          "hasRole(bytes32,address)": "91d14854",
          "newPoint(uint256,address,uint256,uint256)": "5f4717fe",
          "renounceRole(bytes32,address)": "36568abe",
          "revokeRole(bytes32,address)": "d547741f",
          "supportsInterface(bytes4)": "01ffc9a7"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"NewPoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"earnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"newPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"events\":{\"NewPoint(uint256,address,uint256,uint256)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Leaderboard/Leaderboard.sol\":\"Leaderboard\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xc1c2a7f1563b77050dc6d507db9f4ada5d042c1f6a9ddbffdc49c77cdc0a1606\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/Leaderboard/Leaderboard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract Leaderboard is AccessControl {\\n    bytes32 private constant GAME_ROLE = keccak256(\\\"GAME_ROLE\\\");\\n\\n    //////////////\\n    /// Storage\\n    //////////////\\n    mapping(address => uint256) points;\\n\\n    //////////////\\n    /// Events\\n    //////////////\\n    event NewPoint(\\n        uint256 gameId,\\n        address user,\\n        uint256 earnAmount,\\n        uint256 betAmount\\n    );\\n\\n    //////////////\\n    /// Constructor\\n    //////////////\\n    constructor() {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(GAME_ROLE, msg.sender);\\n    }\\n\\n    function newPoint(\\n        uint256 gameId,\\n        address user,\\n        uint256 earnAmount,\\n        uint256 betAmount\\n    ) public onlyRole(GAME_ROLE) {\\n        emit NewPoint(gameId, user, earnAmount, betAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x84f7af622330491dd109ee4ef2c9aeb9957bff73042d14a8a19fa5f248e6142c\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 26,
            "contract": "contracts/Leaderboard/Leaderboard.sol:Leaderboard",
            "label": "_roles",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
          },
          {
            "astId": 1622,
            "contract": "contracts/Leaderboard/Leaderboard.sol:Leaderboard",
            "label": "points",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => struct AccessControl.RoleData)",
            "numberOfBytes": "32",
            "value": "t_struct(RoleData)21_storage"
          },
          "t_struct(RoleData)21_storage": {
            "encoding": "inplace",
            "label": "struct AccessControl.RoleData",
            "members": [
              {
                "astId": 18,
                "contract": "contracts/Leaderboard/Leaderboard.sol:Leaderboard",
                "label": "hasRole",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "astId": 20,
                "contract": "contracts/Leaderboard/Leaderboard.sol:Leaderboard",
                "label": "adminRole",
                "offset": 0,
                "slot": "1",
                "type": "t_bytes32"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "events": {
          "NewPoint(uint256,address,uint256,uint256)": {
            "notice": "Events"
          }
        },
        "kind": "user",
        "methods": {
          "constructor": {
            "notice": "Constructor"
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"contracts/CoinFlip/CoinFlip.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"../Leaderboard/Leaderboard.sol\\\";\\n\\ncontract CoinFlip is AccessControl, Pausable {\\n    // -----------\\n    /// Constants\\n    // -----------\\n    bytes32 private constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 private constant WITHDRAWER = keccak256(\\\"WITHDRAWER\\\");\\n    uint256 private constant FEE_DENOMINATOR = 10_000;\\n    uint256 public constant GAME_ID = 1;\\n\\n    // -----------\\n    /// Storages\\n    // -----------\\n    uint256 public totalGame;\\n    uint256 public betFee;\\n    uint256 public minBet;\\n    uint256 public maxBet;\\n    address public feeReceiver;\\n    uint256 public govFee;\\n    address public govAddress;\\n    address public leaderboard;\\n\\n    // -----------\\n    // Events\\n    // -----------\\n    event Game(uint256 betAmount, uint256 fee, address user, bool isWin);\\n\\n    constructor(address leaderboard_) {\\n        address sender = _msgSender();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, sender);\\n        _grantRole(ADMIN_ROLE, sender);\\n\\n        betFee = 350;\\n        minBet = 25 ether / 1_000; // 0.025\\n        maxBet = 2 ether; // 2\\n        govFee = 1 ether / 100_000; // 0.00001\\n\\n        feeReceiver = sender;\\n        govAddress = sender;\\n        leaderboard = leaderboard_;\\n    }\\n\\n    function flip(bool gtSide) external payable whenNotPaused {\\n        address sender = _msgSender();\\n        // take fee\\n        uint256 _betAmountBeforeFee = msg.value - govFee;\\n        uint256 _betAmount = (_betAmountBeforeFee * FEE_DENOMINATOR) /\\n            (FEE_DENOMINATOR + betFee);\\n        require(_betAmount >= minBet && _betAmount <= maxBet, \\\"invalid bet\\\");\\n\\n        uint256 _rewardAmount = 2 * _betAmount;\\n        require(address(this).balance >= _rewardAmount, \\\"house out of balance\\\");\\n\\n        uint256 fee = _betAmountBeforeFee - _betAmount;\\n        totalGame = totalGame + 1;\\n\\n        payable(govAddress).transfer(govFee);\\n        payable(feeReceiver).transfer(fee);\\n\\n        // check result\\n        bool gtResult = getRandomBool();\\n        bool isWin = gtResult == gtSide;\\n\\n        uint256 earnAmount = 0;\\n        if (isWin) {\\n            payable(sender).transfer(_rewardAmount);\\n            earnAmount = _rewardAmount - msg.value;\\n        }\\n        Leaderboard(leaderboard).newPoint(\\n            GAME_ID,\\n            msg.sender,\\n            earnAmount,\\n            _betAmount\\n        );\\n\\n        emit Game(_betAmount, fee, sender, isWin);\\n    }\\n\\n    function setBetFee(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        betFee = val;\\n    }\\n\\n    function setMinBet(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        require(val <= maxBet, \\\"invalid bet\\\");\\n        minBet = val;\\n    }\\n\\n    function setMaxBet(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        require(val >= minBet, \\\"invalid bet\\\");\\n        maxBet = val;\\n    }\\n\\n    function setGovFee(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        govFee = val;\\n    }\\n\\n    function setFeeReceiver(address receiver) public onlyRole(ADMIN_ROLE) {\\n        feeReceiver = receiver;\\n    }\\n\\n    function setGovAddress(address gov) public onlyRole(ADMIN_ROLE) {\\n        govAddress = gov;\\n    }\\n\\n    function withdrawAll(address addr) external onlyRole(WITHDRAWER) {\\n        address payable _to = payable(addr);\\n        _to.transfer(address(this).balance);\\n    }\\n\\n    function withdraw(\\n        address addr,\\n        uint256 amount\\n    ) external onlyRole(WITHDRAWER) {\\n        uint256 balance = address(this).balance;\\n        require(amount <= balance, \\\"invalid amount\\\");\\n        address payable _to = payable(addr);\\n        _to.transfer(amount);\\n    }\\n\\n    function setLeaderboard(address leaderboard_) public onlyRole(ADMIN_ROLE) {\\n        leaderboard = leaderboard_;\\n    }\\n\\n    /**\\n     * @dev called by the owner to pause, triggers stopped state\\n     */\\n    function pause() external onlyRole(ADMIN_ROLE) whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev called by the owner to unpause, returns to normal state\\n     */\\n    function unpause() external onlyRole(ADMIN_ROLE) whenPaused {\\n        _unpause();\\n    }\\n\\n    receive() external payable {}\\n\\n    function getRandomBool() internal view returns (bool) {\\n        uint256 randomHash = uint256(\\n            keccak256(\\n                abi.encodePacked(block.timestamp, block.prevrandao, msg.sender)\\n            )\\n        );\\n        return randomHash % 2 == 0;\\n    }\\n}\\n\"\n    },\n    \"contracts/Crash/Crash.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"../Leaderboard/Leaderboard.sol\\\";\\n\\ncontract Crash is AccessControl, Pausable {\\n    // -----------\\n    /// Constants\\n    // -----------\\n    bytes32 private constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 private constant WITHDRAWER = keccak256(\\\"WITHDRAWER\\\");\\n    uint256 private constant FEE_DENOMINATOR = 10_000;\\n    uint256 public constant GAME_ID = 2;\\n\\n    // -----------\\n    /// Storages\\n    // -----------\\n    uint256 public totalGame;\\n    uint256 public betFee;\\n    uint256 public minBet;\\n    uint256 public maxBet;\\n    address public feeReceiver;\\n    uint256 public govFee;\\n    address public govAddress;\\n    address public leaderboard;\\n\\n    // -----------\\n    // Events\\n    // -----------\\n    event Game(uint256 betAmount, uint256 fee, address user, bool isWin);\\n\\n    constructor(address leaderboard_) {\\n        address sender = _msgSender();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, sender);\\n        _grantRole(ADMIN_ROLE, sender);\\n\\n        betFee = 350;\\n        minBet = 25 ether / 1_000; // 0.025\\n        maxBet = 2 ether; // 2\\n        govFee = 1 ether / 100_000; // 0.00001\\n\\n        feeReceiver = sender;\\n        govAddress = sender;\\n        leaderboard = leaderboard_;\\n    }\\n\\n    function _calculateBetArray(\\n        uint64 multiplier\\n    ) public pure returns (uint64 winRate, uint64 totalRate) {\\n        // Extract the fractional part by multiplying the multiplier by 100 and getting the remainder\\n        uint64 fraction = multiplier % 100;\\n\\n        // Determine the number of repetitions based on the fractional part\\n        if (fraction == 25) {\\n            winRate = 4;\\n        } else if (fraction == 50) {\\n            winRate = 2;\\n        } else if (fraction == 75) {\\n            winRate = 4; // Needs 4 repetitions to sum to a whole number\\n        } else {\\n            winRate = 1; // Whole numbers and zero fraction\\n        }\\n\\n        // Calculate the total sum when the multiplier is used 'repeatMultiplier' times\\n        uint64 totalSum = multiplier * winRate;\\n\\n        // Calculate the total number of elements needed (rounded up to ensure whole number)\\n        totalRate = (totalSum + 99) / 100; // Ceiling equivalent for total sum\\n    }\\n\\n    // multiplier: 100 -> 10000 (x1 -> x100)\\n    function crash(uint64 multiplier) external payable whenNotPaused {\\n        // Validate must divisable to 25\\n        require(\\n            multiplier > 100 && multiplier < 10000 && multiplier % 25 == 0,\\n            \\\"invalid multiplier\\\"\\n        );\\n\\n        address sender = _msgSender();\\n        // take fee\\n        uint256 _betAmountBeforeFee = msg.value - govFee;\\n        uint256 _betAmount = (_betAmountBeforeFee * FEE_DENOMINATOR) /\\n            (FEE_DENOMINATOR + betFee);\\n        require(_betAmount >= minBet && _betAmount <= maxBet, \\\"invalid bet\\\");\\n\\n        uint256 fee = _betAmountBeforeFee - _betAmount;\\n        totalGame = totalGame + 1;\\n\\n        payable(govAddress).transfer(govFee);\\n        payable(feeReceiver).transfer(fee);\\n\\n        uint256 _rewardAmount = (multiplier * _betAmount) / 100;\\n        require(address(this).balance >= _rewardAmount, \\\"house out of balance\\\");\\n\\n        (uint64 winRate, uint64 totalRate) = _calculateBetArray(multiplier);\\n\\n        // check result\\n        uint64 rand = getRandomUint64();\\n        rand = rand % totalRate;\\n\\n        bool isWin = rand < winRate;\\n        uint256 earnAmount = 0;\\n        if (isWin) {\\n            payable(sender).transfer(_rewardAmount);\\n            earnAmount = _rewardAmount - msg.value;\\n        }\\n        Leaderboard(leaderboard).newPoint(\\n            GAME_ID,\\n            msg.sender,\\n            earnAmount,\\n            _betAmount\\n        );\\n\\n        emit Game(_betAmount, fee, sender, isWin);\\n    }\\n\\n    function setBetFee(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        betFee = val;\\n    }\\n\\n    function setMinBet(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        require(val <= maxBet, \\\"invalid bet\\\");\\n        minBet = val;\\n    }\\n\\n    function setMaxBet(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        require(val >= minBet, \\\"invalid bet\\\");\\n        maxBet = val;\\n    }\\n\\n    function setGovFee(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        govFee = val;\\n    }\\n\\n    function setFeeReceiver(address receiver) public onlyRole(ADMIN_ROLE) {\\n        feeReceiver = receiver;\\n    }\\n\\n    function setGovAddress(address gov) public onlyRole(ADMIN_ROLE) {\\n        govAddress = gov;\\n    }\\n\\n    function withdrawAll(address addr) external onlyRole(WITHDRAWER) {\\n        address payable _to = payable(addr);\\n        _to.transfer(address(this).balance);\\n    }\\n\\n    function withdraw(\\n        address addr,\\n        uint256 amount\\n    ) external onlyRole(WITHDRAWER) {\\n        uint256 balance = address(this).balance;\\n        require(amount <= balance, \\\"invalid amount\\\");\\n        address payable _to = payable(addr);\\n        _to.transfer(amount);\\n    }\\n\\n    function setLeaderboard(address leaderboard_) public onlyRole(ADMIN_ROLE) {\\n        leaderboard = leaderboard_;\\n    }\\n\\n    /**\\n     * @dev called by the owner to pause, triggers stopped state\\n     */\\n    function pause() external onlyRole(ADMIN_ROLE) whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev called by the owner to unpause, returns to normal state\\n     */\\n    function unpause() external onlyRole(ADMIN_ROLE) whenPaused {\\n        _unpause();\\n    }\\n\\n    receive() external payable {}\\n\\n    function getRandomUint64() internal view returns (uint64) {\\n        uint256 randomHash = uint256(\\n            keccak256(\\n                abi.encodePacked(block.timestamp, block.prevrandao, msg.sender)\\n            )\\n        );\\n        return uint64(randomHash);\\n    }\\n}\\n\"\n    },\n    \"contracts/Leaderboard/Leaderboard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract Leaderboard is AccessControl {\\n    bytes32 private constant GAME_ROLE = keccak256(\\\"GAME_ROLE\\\");\\n\\n    //////////////\\n    /// Storage\\n    //////////////\\n    mapping(address => uint256) points;\\n\\n    //////////////\\n    /// Events\\n    //////////////\\n    event NewPoint(\\n        uint256 gameId,\\n        address user,\\n        uint256 earnAmount,\\n        uint256 betAmount\\n    );\\n\\n    //////////////\\n    /// Constructor\\n    //////////////\\n    constructor() {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(GAME_ROLE, msg.sender);\\n    }\\n\\n    function newPoint(\\n        uint256 gameId,\\n        address user,\\n        uint256 earnAmount,\\n        uint256 betAmount\\n    ) public onlyRole(GAME_ROLE) {\\n        emit NewPoint(gameId, user, earnAmount, betAmount);\\n    }\\n}\\n\"\n    },\n    \"contracts/Mines/Mines.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"../Leaderboard/Leaderboard.sol\\\";\\n\\ncontract Mines is AccessControl, Pausable {\\n    // -----------\\n    /// Constants\\n    // -----------\\n    bytes32 private constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 private constant WITHDRAWER = keccak256(\\\"WITHDRAWER\\\");\\n    uint256 private constant FEE_DENOMINATOR = 10_000;\\n    uint64 public constant GRID_SIZE = 16;\\n    uint256 public constant GAME_ID = 4;\\n\\n    // -----------\\n    /// Storages\\n    // -----------\\n    uint256 public totalGame;\\n    uint256 public betFee;\\n    uint256 public minBet;\\n    uint256 public maxBet;\\n    address public feeReceiver;\\n    uint256 public govFee;\\n    address public govAddress;\\n    address public leaderboard;\\n\\n    // -----------\\n    // Events\\n    // -----------\\n    event Game(\\n        uint256 betAmount,\\n        uint256 fee,\\n        address user,\\n        uint256 reward,\\n        uint256 multiplier\\n    );\\n\\n    constructor(address leaderboard_) {\\n        address sender = _msgSender();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, sender);\\n        _grantRole(ADMIN_ROLE, sender);\\n\\n        betFee = 350;\\n        minBet = 25 ether / 1_000; // 0.025\\n        maxBet = 2 ether; // 2\\n        govFee = 1 ether / 100_000; // 0.00001\\n\\n        feeReceiver = sender;\\n        govAddress = sender;\\n        leaderboard = leaderboard_;\\n    }\\n\\n    function _calculateBetArray(\\n        uint64 mines,\\n        uint64 level\\n    )\\n        public\\n        pure\\n        returns (uint64 winRate, uint64 totalRate, uint256 multiplier)\\n    {\\n        totalRate = GRID_SIZE - level;\\n        winRate = totalRate - mines;\\n        multiplier = uint256((totalRate * 100) / (totalRate - mines));\\n    }\\n\\n    function checkMine(\\n        uint64 mines,\\n        uint64 level\\n    ) external payable whenNotPaused {\\n        require(\\n            mines == 1 ||\\n                mines == 3 ||\\n                mines == 5 ||\\n                mines == 10 ||\\n                mines == 15,\\n            \\\"invalid mines\\\"\\n        );\\n        require(mines <= GRID_SIZE - level, \\\"Mines exceed remaining cells\\\");\\n\\n        address sender = _msgSender();\\n        // take fee\\n        uint256 _betAmountBeforeFee = msg.value - govFee;\\n        uint256 _betAmount = (_betAmountBeforeFee * FEE_DENOMINATOR) /\\n            (FEE_DENOMINATOR + betFee);\\n        require(_betAmount >= minBet && _betAmount <= maxBet, \\\"invalid bet\\\");\\n\\n        uint256 fee = _betAmountBeforeFee - _betAmount;\\n        totalGame = totalGame + 1;\\n\\n        payable(govAddress).transfer(govFee);\\n        payable(feeReceiver).transfer(fee);\\n\\n        (\\n            uint64 winRate,\\n            uint64 totalRate,\\n            uint256 multiplier\\n        ) = _calculateBetArray(mines, level);\\n\\n        uint256 _rewardAmount = (multiplier * _betAmount) / 100;\\n        require(address(this).balance >= _rewardAmount, \\\"house out of balance\\\");\\n\\n        // check result\\n        uint64 rand = getRandomUint64();\\n        rand = rand % totalRate;\\n\\n        bool isWin = rand < winRate;\\n        uint256 earnAmount = 0;\\n        if (isWin) {\\n            payable(sender).transfer(_rewardAmount);\\n            earnAmount = _rewardAmount - msg.value;\\n        } else {\\n            _rewardAmount = 0;\\n            multiplier = 0;\\n        }\\n        Leaderboard(leaderboard).newPoint(\\n            GAME_ID,\\n            msg.sender,\\n            earnAmount,\\n            _betAmount\\n        );\\n\\n        emit Game(_betAmount, fee, sender, _rewardAmount, multiplier);\\n    }\\n\\n    function setBetFee(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        betFee = val;\\n    }\\n\\n    function setMinBet(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        require(val <= maxBet, \\\"invalid bet\\\");\\n        minBet = val;\\n    }\\n\\n    function setMaxBet(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        require(val >= minBet, \\\"invalid bet\\\");\\n        maxBet = val;\\n    }\\n\\n    function setGovFee(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        govFee = val;\\n    }\\n\\n    function setFeeReceiver(address receiver) public onlyRole(ADMIN_ROLE) {\\n        feeReceiver = receiver;\\n    }\\n\\n    function setGovAddress(address gov) public onlyRole(ADMIN_ROLE) {\\n        govAddress = gov;\\n    }\\n\\n    function withdrawAll(address addr) external onlyRole(WITHDRAWER) {\\n        address payable _to = payable(addr);\\n        _to.transfer(address(this).balance);\\n    }\\n\\n    function withdraw(\\n        address addr,\\n        uint256 amount\\n    ) external onlyRole(WITHDRAWER) {\\n        uint256 balance = address(this).balance;\\n        require(amount <= balance, \\\"invalid amount\\\");\\n        address payable _to = payable(addr);\\n        _to.transfer(amount);\\n    }\\n\\n    function setLeaderboard(address leaderboard_) public onlyRole(ADMIN_ROLE) {\\n        leaderboard = leaderboard_;\\n    }\\n\\n    /**\\n     * @dev called by the owner to pause, triggers stopped state\\n     */\\n    function pause() external onlyRole(ADMIN_ROLE) whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev called by the owner to unpause, returns to normal state\\n     */\\n    function unpause() external onlyRole(ADMIN_ROLE) whenPaused {\\n        _unpause();\\n    }\\n\\n    receive() external payable {}\\n\\n    function getRandomUint64() internal view returns (uint64) {\\n        uint256 randomHash = uint256(\\n            keccak256(\\n                abi.encodePacked(block.timestamp, block.prevrandao, msg.sender)\\n            )\\n        );\\n        return uint64(randomHash);\\n    }\\n}\\n\"\n    },\n    \"contracts/Plinko/Plinko.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"../Leaderboard/Leaderboard.sol\\\";\\n\\ncontract Plinko is AccessControl, Pausable {\\n    // -----------\\n    /// Constants\\n    // -----------\\n    bytes32 private constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 private constant WITHDRAWER = keccak256(\\\"WITHDRAWER\\\");\\n    uint256 private constant FEE_DENOMINATOR = 10_000;\\n    uint64 private constant DEGEN_LENGTH = 49;\\n    uint64 private constant BASIC_LENGTH = 66;\\n    uint256 private constant MAX_MULTIPLIER = 1500;\\n    uint256 public constant GAME_ID = 3;\\n\\n    // -----------\\n    /// Storages\\n    // -----------\\n    uint256 public totalGame;\\n    uint256 public betFee;\\n    uint256 public minBet;\\n    uint256 public maxBet;\\n    address public feeReceiver;\\n    uint256 public govFee;\\n    address public govAddress;\\n    address public leaderboard;\\n    mapping(uint64 => uint256) public degenMultiplier;\\n    mapping(uint64 => uint256) public basicMultiplier;\\n\\n    // -----------\\n    // Events\\n    // -----------\\n    event Game(\\n        uint256 betAmount,\\n        uint256 fee,\\n        address user,\\n        uint256 multiplier,\\n        uint256 rewardAmount\\n    );\\n\\n    constructor(address leaderboard_) {\\n        address sender = _msgSender();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, sender);\\n        _grantRole(ADMIN_ROLE, sender);\\n\\n        betFee = 350;\\n        minBet = 25 ether / 1_000; // 0.025\\n        maxBet = 2 ether; // 2\\n        govFee = 1 ether / 100_000; // 0.00001\\n\\n        feeReceiver = sender;\\n        govAddress = sender;\\n        leaderboard = leaderboard_;\\n\\n        // Degen\\n        degenMultiplier[43] = 200;\\n        degenMultiplier[44] = 200;\\n        degenMultiplier[45] = 1000;\\n        degenMultiplier[46] = 1000;\\n        degenMultiplier[47] = 1000;\\n        degenMultiplier[48] = 1500;\\n\\n        // Basic\\n        for (uint64 i = 0; i < 48; i++) basicMultiplier[i] = 50;\\n        for (uint64 i = 48; i < 58; i++) basicMultiplier[i] = 150;\\n        for (uint64 i = 58; i < 65; i++) basicMultiplier[i] = 300;\\n        basicMultiplier[65] = 600;\\n    }\\n\\n    function _calculateBetArray(\\n        uint64 multiplier\\n    ) public pure returns (uint64 winRate, uint64 totalRate) {\\n        // Extract the fractional part by multiplying the multiplier by 100 and getting the remainder\\n        uint64 fraction = multiplier % 100;\\n\\n        // Determine the number of repetitions based on the fractional part\\n        if (fraction == 25) {\\n            winRate = 4;\\n        } else if (fraction == 50) {\\n            winRate = 2;\\n        } else if (fraction == 75) {\\n            winRate = 4; // Needs 4 repetitions to sum to a whole number\\n        } else {\\n            winRate = 1; // Whole numbers and zero fraction\\n        }\\n\\n        // Calculate the total sum when the multiplier is used 'repeatMultiplier' times\\n        uint64 totalSum = multiplier * winRate;\\n\\n        // Calculate the total number of elements needed (rounded up to ensure whole number)\\n        totalRate = (totalSum + 99) / 100; // Ceiling equivalent for total sum\\n    }\\n\\n    function plinko(bool degen, uint256 ball) external payable whenNotPaused {\\n        address sender = _msgSender();\\n        // take fee\\n        uint256 _betAmountBeforeFee = msg.value - (ball * govFee);\\n        uint256 _betAmount = (_betAmountBeforeFee * FEE_DENOMINATOR) /\\n            (FEE_DENOMINATOR + betFee) /\\n            ball;\\n        require(_betAmount >= minBet && _betAmount <= maxBet, \\\"invalid bet\\\");\\n\\n        uint256 fee = _betAmountBeforeFee - (_betAmount * ball);\\n        totalGame += ball;\\n\\n        payable(govAddress).transfer(govFee);\\n        payable(feeReceiver).transfer(fee);\\n\\n        uint256 maxRewardAmount = (ball * (MAX_MULTIPLIER * _betAmount)) / 100;\\n        require(\\n            address(this).balance >= maxRewardAmount,\\n            \\\"house out of balance\\\"\\n        );\\n\\n        uint64 totalRate = degen ? DEGEN_LENGTH : BASIC_LENGTH;\\n\\n        // check result\\n        uint totalRewardAmount = 0;\\n        uint64 rand = getRandomUint64();\\n        for (uint64 i = 0; i < ball; i++) {\\n            uint64 randIndex = (rand * (i + 1)) % totalRate;\\n\\n            uint256 multiplier = degen\\n                ? degenMultiplier[randIndex]\\n                : basicMultiplier[randIndex];\\n            uint rewardAmount = (multiplier * _betAmount) / 100;\\n            totalRewardAmount += rewardAmount;\\n            emit Game(_betAmount, fee, sender, multiplier, rewardAmount);\\n        }\\n\\n        if (totalRewardAmount > 0) {\\n            payable(sender).transfer(totalRewardAmount);\\n        }\\n\\n        Leaderboard(leaderboard).newPoint(\\n            GAME_ID,\\n            msg.sender,\\n            totalRewardAmount - msg.value,\\n            _betAmount * ball\\n        );\\n    }\\n\\n    function setBetFee(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        betFee = val;\\n    }\\n\\n    function setMinBet(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        require(val <= maxBet, \\\"invalid bet\\\");\\n        minBet = val;\\n    }\\n\\n    function setMaxBet(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        require(val >= minBet, \\\"invalid bet\\\");\\n        maxBet = val;\\n    }\\n\\n    function setGovFee(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        govFee = val;\\n    }\\n\\n    function setFeeReceiver(address receiver) public onlyRole(ADMIN_ROLE) {\\n        feeReceiver = receiver;\\n    }\\n\\n    function setGovAddress(address gov) public onlyRole(ADMIN_ROLE) {\\n        govAddress = gov;\\n    }\\n\\n    function withdrawAll(address addr) external onlyRole(WITHDRAWER) {\\n        address payable _to = payable(addr);\\n        _to.transfer(address(this).balance);\\n    }\\n\\n    function withdraw(\\n        address addr,\\n        uint256 amount\\n    ) external onlyRole(WITHDRAWER) {\\n        uint256 balance = address(this).balance;\\n        require(amount <= balance, \\\"invalid amount\\\");\\n        address payable _to = payable(addr);\\n        _to.transfer(amount);\\n    }\\n\\n    function setLeaderboard(address leaderboard_) public onlyRole(ADMIN_ROLE) {\\n        leaderboard = leaderboard_;\\n    }\\n\\n    /**\\n     * @dev called by the owner to pause, triggers stopped state\\n     */\\n    function pause() external onlyRole(ADMIN_ROLE) whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev called by the owner to unpause, returns to normal state\\n     */\\n    function unpause() external onlyRole(ADMIN_ROLE) whenPaused {\\n        _unpause();\\n    }\\n\\n    receive() external payable {}\\n\\n    function getRandomUint64() internal view returns (uint64) {\\n        uint256 randomHash = uint256(\\n            keccak256(\\n                abi.encodePacked(block.timestamp, block.prevrandao, msg.sender)\\n            )\\n        );\\n        return uint64(randomHash);\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 1000\n    },\n    \"evmVersion\": \"cancun\",\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"storageLayout\",\n          \"devdoc\",\n          \"userdoc\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "e9ca70e6a31db82f20c7d1fa39b415cc",
      "transactionHash": "0x7ab348218f63881a6e06ae5764e021e7427703229b56218d9233833f93774291",
      "args": []
    },
    "decoded": {
      "from": "0x8049467e09C64Fa49B73F3dB56fbCED2b3E21B85",
      "gasPrice": "1000000000",
      "maxFeePerGas": "1000000000",
      "maxPriorityFeePerGas": "1000000000",
      "gasLimit": "427970",
      "to": null,
      "value": "0",
      "nonce": 48,
      "data": "0x608060405234801561000f575f5ffd5b5061001a5f3361004b565b506100457f6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa883361004b565b506100f4565b5f828152602081815260408083206001600160a01b038516845290915281205460ff166100eb575f838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556100a33390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016100ee565b505f5b92915050565b6105dc806101015f395ff3fe608060405234801561000f575f5ffd5b5060043610610085575f3560e01c80635f4717fe116100585780635f4717fe1461010957806391d148541461011c578063a217fddf14610152578063d547741f14610159575f5ffd5b806301ffc9a714610089578063248a9ca3146100b15780632f2ff15d146100e157806336568abe146100f6575b5f5ffd5b61009c6100973660046104cc565b61016c565b60405190151581526020015b60405180910390f35b6100d36100bf366004610512565b5f9081526020819052604090206001015490565b6040519081526020016100a8565b6100f46100ef366004610544565b610204565b005b6100f4610104366004610544565b61022e565b6100f461011736600461056e565b61027f565b61009c61012a366004610544565b5f918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6100d35f81565b6100f4610167366004610544565b610300565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806101fe57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b5f8281526020819052604090206001015461021e81610324565b6102288383610331565b50505050565b6001600160a01b0381163314610270576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61027a82826103d8565b505050565b7f6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa886102a981610324565b604080518681526001600160a01b0386166020820152908101849052606081018390527f369ef82f66eadde18e1bbf5e74404786f74da46573b0a7c36a5faa128cb1d3fe9060800160405180910390a15050505050565b5f8281526020819052604090206001015461031a81610324565b61022883836103d8565b61032e8133610459565b50565b5f828152602081815260408083206001600160a01b038516845290915281205460ff166103d1575f838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556103893390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016101fe565b505f6101fe565b5f828152602081815260408083206001600160a01b038516845290915281205460ff16156103d1575f838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016101fe565b5f828152602081815260408083206001600160a01b038516845290915290205460ff166104c8576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024810183905260440160405180910390fd5b5050565b5f602082840312156104dc575f5ffd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461050b575f5ffd5b9392505050565b5f60208284031215610522575f5ffd5b5035919050565b80356001600160a01b038116811461053f575f5ffd5b919050565b5f5f60408385031215610555575f5ffd5b8235915061056560208401610529565b90509250929050565b5f5f5f5f60808587031215610581575f5ffd5b8435935061059160208601610529565b9396939550505050604082013591606001359056fea26469706673582212204cf9d8ecded32c4ea33f896da21d79fe80b723320a0f626352c8ad8b1b79db1d64736f6c634300081c0033",
      "r": "0x106bcbbc6897c6f20347e27328321f3d7b349f20ad361ba48dadbd7dd92627c9",
      "s": "0x5991d3bcb4cd2021b9a2bdf15870cb066bacbb388c08298496ec866d724468b8",
      "v": 1,
      "chainId": 1115
    }
  }
}