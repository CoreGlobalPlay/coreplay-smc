{
  "address": "0x216c6350a2bB1d09f76D8Bc59adAc309F2f34701",
  "abi": [
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        }
      ],
      "name": "Ball",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balls",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "Game",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balls",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "NewBet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sequence",
          "type": "uint256"
        }
      ],
      "name": "RandomRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAME_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "basicMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "degenMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gameIdToBetInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "degen",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "balls",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "betAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "leaderboard_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "switchboard_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "swQueue_",
          "type": "bytes32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leaderboard",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "degen",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "balls",
          "type": "uint256"
        }
      ],
      "name": "plinko",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "queue",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "switchboardUpdateFeeds",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "seq",
          "type": "uint256"
        }
      ],
      "name": "resolve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "seq2GameId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequence",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "leaderboard_",
          "type": "address"
        }
      ],
      "name": "setLeaderboard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "solvedSeq",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x473202b03b1cf4b57198ca3e88549b37204ae7b8858aa74fa06e86ef357ebf4e",
  "receipt": {
    "to": null,
    "from": "0x95485ceC9172e2Dc06690Aa2F986B19f0e364E45",
    "contractAddress": "0x216c6350a2bB1d09f76D8Bc59adAc309F2f34701",
    "transactionIndex": 0,
    "gasUsed": "1968603",
    "logsBloom": "0x
    "blockHash": "0x894a3e46df0157c84f8e6f19f7983a0fa9dda19e363f2ddf477aa0b0a85961b5",
    "transactionHash": "0x473202b03b1cf4b57198ca3e88549b37204ae7b8858aa74fa06e86ef357ebf4e",
    "logs": [],
    "blockNumber": 4958324,
    "cumulativeGasUsed": "1968603",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "155fae5c01d3aac707cbd81bd2af8e89",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"Ball\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balls\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"Game\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balls\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"NewBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sequence\",\"type\":\"uint256\"}],\"name\":\"RandomRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAME_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"basicMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"degenMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameIdToBetInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"degen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balls\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"leaderboard_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"switchboard_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"swQueue_\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaderboard\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"degen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balls\",\"type\":\"uint256\"}],\"name\":\"plinko\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"switchboardUpdateFeeds\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"}],\"name\":\"resolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seq2GameId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequence\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"leaderboard_\",\"type\":\"address\"}],\"name\":\"setLeaderboard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"solvedSeq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"pause()\":{\"details\":\"called by the owner to pause, triggers stopped state\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"called by the owner to unpause, returns to normal state\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"totalGame()\":{\"notice\":\"Storages\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Plinko/Plinko.sol\":\"Plinko\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0d4d7d19a052a2ef9d17b28450133631188b895e1755747fa8ad0280aadfb534\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x574a7451e42724f7de29e2855c392a8a5020acd695169466a18459467d719d63\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    function __Pausable_init() internal onlyInitializing {\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa6bf6b7efe0e6625a9dcd30c5ddf52c4c24fe8372f37c7de9dbf5034746768d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xc1c2a7f1563b77050dc6d507db9f4ada5d042c1f6a9ddbffdc49c77cdc0a1606\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc42facb5094f2f35f066a7155bda23545e39a3156faef3ddc00185544443ba7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8decfa54cec979c824b044b8128cd91d713f72c71fd7dfa54974624d8c949898\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@switchboard-xyz/on-demand-solidity/ISwitchboard.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IAggregatorModule} from \\\"./interfaces/IAggregatorModule.sol\\\";\\nimport {IOracleModule} from \\\"./interfaces/IOracleModule.sol\\\";\\nimport {IRandomnessModule} from \\\"./interfaces/IRandomnessModule.sol\\\";\\nimport {ISwitchboardModule} from \\\"./interfaces/ISwitchboardModule.sol\\\";\\nimport {IQueueModule} from \\\"./interfaces/IQueueModule.sol\\\";\\n\\ninterface ISwitchboard is\\n    IAggregatorModule,\\n    IOracleModule,\\n    IRandomnessModule,\\n    ISwitchboardModule,\\n    IQueueModule\\n{}\\n\",\"keccak256\":\"0x917c1c895984e531a6941f84397abe8282bd43483491644886e208afe179a677\",\"license\":\"UNLICENSED\"},\"@switchboard-xyz/on-demand-solidity/interfaces/IAggregatorModule.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Structs} from \\\"../structs/Structs.sol\\\";\\n\\n// -- Aggregators: an abstraction over feeds to allow for reconfiguration --\\ninterface IAggregatorModule {\\n    event AggregatorCreated(\\n        bytes32 indexed aggregatorId,\\n        bytes32 indexed feedId,\\n        address authority\\n    );\\n    event AggregatorConfigured(\\n        bytes32 indexed aggregatorId,\\n        string name,\\n        uint256 toleratedDelta,\\n        bytes32 cid,\\n        uint64 maxVariance,\\n        uint32 minResponses\\n    );\\n    event AggregatorAuthoritySet(\\n        bytes32 indexed aggregatorId,\\n        address indexed authority\\n    );\\n\\n    /**\\n     * Create a new aggregator\\n     * @param aggregator The aggregator to create\\n     */\\n    function createAggregator(Structs.Aggregator calldata aggregator) external;\\n\\n    /**\\n     * Set the config for an aggregator\\n     * @dev Only the authority of the aggregator can set the config\\n     * @param aggregatorId The aggregatorId to set the config for\\n     * @param name The name of the aggregator\\n     * @param toleratedDelta The maximum staleness blocks for a valid feed result (or seconds if the queue has a time feed)\\n     * @param cid The content id (IPFS cid for example) for the feed\\n     * @param feedId The feedId associated with the aggregator\\n     * @param maxVariance The maximum variance allowed for a feed result\\n     * @param minResponses The minimum number of responses required for a valid feed result\\n     * @param minSamples The minimum number of samples to take for a feed result\\n     * @param maxStaleness The maximum number of seconds staleness for an update to be valid\\n     */\\n    function setAggregatorConfig(\\n        bytes32 aggregatorId,\\n        string memory name,\\n        uint256 toleratedDelta,\\n        bytes32 cid,\\n        bytes32 feedId,\\n        uint64 maxVariance,\\n        uint32 minResponses,\\n        uint8 minSamples,\\n        uint256 maxStaleness\\n    ) external;\\n\\n    /**\\n     * Set the authority for an aggregator\\n     * @dev Only the authority of the aggregator can set a new authority\\n     * @param aggregatorId The aggregatorId to set the authority for\\n     * @param authority The new authority to set for the aggregator\\n     */\\n    function setAggregatorAuthority(\\n        bytes32 aggregatorId,\\n        address authority\\n    ) external;\\n\\n    /**\\n     * The aggregator to fetch\\n     * @param aggregatorId The aggregatorId to get\\n     */\\n    function getAggregator(\\n        bytes32 aggregatorId\\n    )\\n        external\\n        view\\n        returns (Structs.Aggregator memory, Structs.Update[] memory);\\n\\n    /**\\n     * Get all aggregators\\n     */\\n    function getAllAggregators()\\n        external\\n        view\\n        returns (Structs.Aggregator[] memory, Structs.Update[][] memory);\\n\\n    /**\\n     * Get the results for a feed\\n     * @param feedId The feedId to get the results for\\n     * @return The results for the feed\\n     */\\n    function getAggregatorResults(\\n        bytes32 feedId\\n    ) external view returns (Structs.Update[] memory);\\n}\\n\",\"keccak256\":\"0x680978b88274eddf6aa7c5a210e296b3d13bac7964e63cc0da2140007ba26882\",\"license\":\"UNLICENSED\"},\"@switchboard-xyz/on-demand-solidity/interfaces/IOracleModule.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Structs} from \\\"../structs/Structs.sol\\\";\\n\\n// -- Oracle: an entity that can provide updates for feeds on a queue --\\ninterface IOracleModule {\\n    /**\\n     * Get oracles associated with an address\\n     * @param queueId the queue\\n     * @param oracleAddress the address of the oracle\\n     * @return oracleAddress the oracle associated with the address\\n     */\\n    function getOracleByAddress(\\n        bytes32 queueId,\\n        address oracleAddress\\n    ) external view returns (Structs.Oracle memory);\\n\\n    /**\\n     * Get an oracle\\n     * @param queueId The queueId associated with the oracle\\n     * @param oracleId The oracleId corresponding to the oracle\\n     * @return The oracle associated with the queueId and oracleId\\n     */\\n    function getOracle(\\n        bytes32 queueId,\\n        bytes32 oracleId\\n    ) external view returns (Structs.Oracle memory);\\n\\n    /**\\n     * Get all oracles associated with a queue\\n     * @param queueId The queueId to get the oracles for\\n     * @return The oracles associated with the queue\\n     */\\n    function getAllOracles(\\n        bytes32 queueId\\n    ) external view returns (Structs.Oracle[] memory);\\n}\\n\",\"keccak256\":\"0xc958d6038bdbfd8d12661263db9bcb5788e156b743a8b3c9f8b7ea71d47217fe\",\"license\":\"UNLICENSED\"},\"@switchboard-xyz/on-demand-solidity/interfaces/IQueueModule.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Structs} from \\\"../structs/Structs.sol\\\";\\n\\n// -- Queues: switchboard subnets (each with its own set of oracles) --\\ninterface IQueueModule {\\n    event QueueCreated(bytes32 queueId, address authority);\\n    event QueueConfigSet(\\n        bytes32 queueId,\\n        string name,\\n        uint256 fee,\\n        uint8 minAttestations,\\n        uint256 toleratedTimestampDelta,\\n        uint8 resultsMaxSize,\\n        uint256 oracleValidityLength,\\n        uint256 toleratedBlocksStaleness\\n    );\\n    event QueueAuthoritySet(bytes32 queueId, address authority);\\n    event QueueMrEnclaveAdded(bytes32 queueId, bytes32 mrEnclave);\\n    event QueueMrEnclaveRemoved(bytes32 queueId, bytes32 mrEnclave);\\n    event QueueOraclesOverridden(bytes32 queueId);\\n\\n    /**\\n     * Create a new queue\\n     * @param queue The queue to create\\n     * @param oracles The initial set of oracles associated with the queue\\n     */\\n    function createQueue(\\n        Structs.Queue calldata queue,\\n        Structs.Oracle[] calldata oracles\\n    ) external;\\n\\n    /**\\n     * Set the config for a queue\\n     * @dev Only the authority of the queue can set the config\\n     * @param queueId the queueId to set the config for\\n     * @param name name of the queue\\n     * @param fee fee required to submit an update to the queue\\n     * @param minAttestations minimum number of attestations required for adding an oracle the queue\\n     * @param toleratedTimestampDelta default maximum staleness blocks for a valid feed result\\n     * @param resultsMaxSize maximum size of the results array for feeds\\n     * @param oracleValidityLength length of time an oracle is valid for\\n     * @param toleratedBlocksStaleness The number of blocks a timestamp is allowed to be stale\\n     */\\n    function setQueueConfig(\\n        bytes32 queueId,\\n        string memory name,\\n        uint256 fee,\\n        uint8 minAttestations,\\n        uint256 toleratedTimestampDelta,\\n        uint8 resultsMaxSize,\\n        uint256 oracleValidityLength,\\n        uint256 toleratedBlocksStaleness\\n    ) external;\\n\\n    /**\\n     * Set the authority for a queue\\n     * @dev Only the authority of the queue can set a new authority\\n     * @param queueId The queueId to set the authority for\\n     * @param authority The new authority to set for the queue\\n     */\\n    function setQueueAuthority(bytes32 queueId, address authority) external;\\n\\n    /**\\n     * Add an enclave measurement to a queue\\n     * @dev Only the authority of the queue can set the mrEnclave\\n     * @param queueId The queueId to set the mrEnclave for\\n     * @param mrEnclave The mrEnclave to set for the queue\\n     */\\n    function addQueueMrEnclave(bytes32 queueId, bytes32 mrEnclave) external;\\n\\n    /**\\n     * Remove an enclave measurement from a queue\\n     * @dev Only the authority of the queue can remove the mrEnclave\\n     * @param queueId The queueId to remove the mrEnclave from\\n     * @param mrEnclave The mrEnclave to remove\\n     */\\n    function removeQueueMrEnclave(bytes32 queueId, bytes32 mrEnclave) external;\\n\\n    /**\\n     * Get the mrEnclaves associated with a queue\\n     * @param queueId The queueId to get the mrEnclaves for\\n     * @return The mrEnclaves associated with the queue\\n     */\\n    function getQueueMrEnclaves(\\n        bytes32 queueId\\n    ) external view returns (bytes32[] memory);\\n\\n    /**\\n     * Set the oracle queue manually (override the oracles array)\\n     * @dev Should only be dao controlled\\n     * @param queueId The queueId to set the oracles for\\n     * @param oracles The oracles to set for the queue\\n     */\\n    function queueOverride(\\n        bytes32 queueId,\\n        bytes32[] calldata mrEnclaves,\\n        Structs.Oracle[] calldata oracles\\n    ) external;\\n\\n    /**\\n     * Get a queue\\n     * @param queueId The queueId to get\\n     */\\n    function getQueue(\\n        bytes32 queueId\\n    ) external view returns (Structs.Queue memory);\\n\\n    /**\\n     * Get all queues\\n     * @return The queues associated with the queueId\\n     */\\n    function getAllQueues() external view returns (Structs.Queue[] memory);\\n}\\n\",\"keccak256\":\"0x69d16e9924475e2d019ea5f10aa8496ab777dd749342a6d391c0b9a8296701d3\",\"license\":\"UNLICENSED\"},\"@switchboard-xyz/on-demand-solidity/interfaces/IRandomnessModule.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Structs} from \\\"../structs/Structs.sol\\\";\\n\\n// -- Randomness: enclave-sourced randomness from an oracle on a queue --\\ninterface IRandomnessModule {\\n    event RandomnessRequested(\\n        bytes32 indexed randomnessId,\\n        address indexed authority,\\n        bytes32 queueId,\\n        uint64 minSettlementDelay,\\n        bytes32 indexed oracleId\\n    );\\n\\n    event RandomnessRerolled(\\n        bytes32 indexed randomnessId,\\n        bytes32 indexed oracleId\\n    );\\n\\n    /**\\n     * Request randomness from Switchboard from an Oracle on the queue\\n     * @param randomnessId The randomness id, which must be unique, is used to identify the randomness request\\n     * @param authority The authority (contract or EOA) that is in charge of providing the randomness\\n     * @param queueId The queue id that the randomness is associated with\\n     * @param minSettlementDelay The minimum delay before the randomness can be settled\\n     */\\n    function requestRandomness(\\n        bytes32 randomnessId,\\n        address authority,\\n        bytes32 queueId,\\n        uint64 minSettlementDelay\\n    ) external;\\n\\n    /**\\n     * Request randomness from Switchboard from an Oracle on the queue\\n     * @param randomnessId The randomness id, which must be unique, is used to identify the randomness request\\n     * @param authority The authority (contract or EOA) that is in charge of providing the randomness\\n     * @param queueId The queue id that the randomness is associated with\\n     * @param minSettlementDelay The minimum delay before the randomness can be settled\\n     * @param oracleId The oracle id that must respond to the request\\n     */\\n    function requestRandomness(\\n        bytes32 randomnessId,\\n        address authority,\\n        bytes32 queueId,\\n        uint64 minSettlementDelay,\\n        bytes32 oracleId\\n    ) external;\\n\\n    /**\\n     * Reroll randomness (to reuse existing randomness objects for new randomness requests)\\n     * @dev caller must be the authority for the randomness\\n     * @param randomnessId The randomness id\\n     */\\n    function rerollRandomness(bytes32 randomnessId) external;\\n\\n    /**\\n     * Reroll randomness (to reuse existing randomness objects for new randomness requests)\\n     * @dev caller must be the authority for the randomness\\n     * @param randomnessId The randomness id\\n     * @param oracleId The oracle id to specifically reroll randomness from\\n     */\\n    function rerollRandomness(bytes32 randomnessId, bytes32 oracleId) external;\\n\\n    /**\\n     * Get randomness by id\\n     * @param randomnessId The randomness id\\n     * @return randomness The randomness object\\n     */\\n    function getRandomness(\\n        bytes32 randomnessId\\n    ) external view returns (Structs.Randomness memory);\\n}\\n\",\"keccak256\":\"0xdb92bc4ecc7a23bf47558712cb61e99208c3dc68cfe30fcab15841c9e746371f\",\"license\":\"UNLICENSED\"},\"@switchboard-xyz/on-demand-solidity/interfaces/ISwitchboardModule.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Structs} from \\\"../structs/Structs.sol\\\";\\n\\n// -- Switchboard: the main contract for the Switchboard protocol  --\\ninterface ISwitchboardModule {\\n    event FeedUpdate(\\n        bytes32 indexed feedId,\\n        bytes32 indexed oracleId,\\n        uint256 timestamp,\\n        int128 result\\n    );\\n    event OracleAdded(\\n        bytes32 indexed queueId,\\n        bytes32 indexed oracleId,\\n        address indexed oracleAddress\\n    );\\n    event OracleRemoved(bytes32 indexed queueId, bytes32 indexed oracleId);\\n    event RandomnessSettled(\\n        bytes32 indexed randomnessId,\\n        bytes32 indexed oracleId,\\n        uint256 timestamp,\\n        uint256 result\\n    );\\n\\n    /**\\n     * Get the latest Update struct for a feed\\n     * @dev Intended to be called within the same transaction as a feed update for the most up-to-date data.\\n     * @dev Reverts if the feed does not exist\\n     * @dev Reverts if the feed does not have a valid update within queue (or aggregator's) tolerated delta\\n     * @dev Reverts if the feed does not have the minimum number of valid responses\\n     * @param feedId The identifier for the feed to get the latest update for\\n     * @return Update The latest update for the given feed\\n     */\\n    function latestUpdate(\\n        bytes32 feedId\\n    ) external view returns (Structs.Update memory);\\n\\n    /**\\n     * Calculate\\n     * @param aggregatorId The feed identifier to calculate the current result for\\n     * @return CurrentResult The current result for the given feed, a struct containing stats and the result\\n     */\\n    function findCurrentResult(\\n        bytes32 aggregatorId\\n    ) external view returns (Structs.CurrentResult memory);\\n\\n    /**\\n     * Get the fee in wei for submitting a set of updates\\n     * @param updates Encoded switchboard update(s) with signatures\\n     * @return uint256 The fee in wei for submitting the updates\\n     */\\n    function getFee(bytes[] calldata updates) external view returns (uint256);\\n\\n    /**\\n     * Update feeds with new oracle results\\n     * @dev reverts if the queue's fee is not paid\\n     * @dev reverts if the blockhash is invalid (i.e. the block is in the future)\\n     * @dev reverts if the timestamp is out of valid range (optional flow for timestamp-sequenced updates)\\n     * @param updates Encoded switchboard update(s) with signatures\\n     */\\n    function updateFeeds(bytes[] calldata updates) external payable;\\n}\\n\",\"keccak256\":\"0xf3ade458a150d41b861500f326c5ea4f3ac2f3d408961b4cb0afc2eb9ef0fe90\",\"license\":\"UNLICENSED\"},\"@switchboard-xyz/on-demand-solidity/structs/Structs.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\ncontract Structs {\\n    /**\\n     * An update to a feed\\n     * @param oracleId The publisher of the update\\n     * @param result The result of the update\\n     * @param timestamp The timestamp of the update\\n     */\\n    struct Update {\\n        bytes32 oracleId;\\n        int128 result;\\n        uint256 timestamp;\\n    }\\n\\n    /**\\n     * The current result for a feed\\n     * @param result The result of the feed\\n     * @param minTimestamp The minimum timestamp of the feed\\n     * @param maxTimestamp The maximum timestamp of the feed\\n     * @param minResult The minimum result of the feed\\n     * @param maxResult The maximum result of the feed\\n     * @param stdev The standard deviation of the feed\\n     * @param range The range of the feed\\n     * @param mean The mean of the feed\\n     */\\n    struct CurrentResult {\\n        int128 result;\\n        uint256 minTimestamp;\\n        uint256 maxTimestamp;\\n        int128 minResult;\\n        int128 maxResult;\\n        int128 stdev;\\n        int128 range;\\n        int128 mean;\\n    }\\n\\n    /**\\n     * Results for a feed\\n     * @param idx The index of the feed\\n     * @param updates The updates for the feed\\n     */\\n    struct Results {\\n        uint256 idx;\\n        Update[] updates;\\n    }\\n\\n    /**\\n     * An abstraction over feed allowing for UI to display the feed in a more human readable way and reconfiguration of sources.\\n     * Reading from this struct should be atomic (same tx as the write).\\n     * @param aggregatorId The aggregator id\\n     * @param authority The authority of the feed\\n     * @param name The name of the feed\\n     * @param queueId The queue id associated with the feed\\n     * @param toleratedDelta The maximum blocks staleness\\n     * @param cid The content id (IPFS cid for example) for the feed\\n     * @param feedHash The feed associated with the aggregator\\n     * @param createdAt The time the feed was created\\n     * @param maxVariance The maximum variance allowed for a feed result\\n     * @param minResponses The minimum number of responses required for a valid feed result\\n     * @param minSamples The minimum number of samples to take for a feed result\\n     * @param maxStaleness The maximum number of seconds staleness for an update to be valid\\n     */\\n    struct Aggregator {\\n        bytes32 aggregatorId;\\n        address authority;\\n        string name;\\n        bytes32 queueId;\\n        uint256 toleratedDelta;\\n        bytes32 cid;\\n        bytes32 feedHash;\\n        uint256 createdAt;\\n        uint64 maxVariance;\\n        uint32 minResponses;\\n        uint8 minSamples;\\n        uint256 maxStaleness;\\n    }\\n\\n    /**\\n     * Queue / Switchboard Subnet\\n     * @param queueId The queue id\\n     * @param authority The authority of the queue\\n     * @param name The name of the queue\\n     * @param fee The fee required to submit an update to the queue\\n     * @param feeRecipient The recipient of the fee (OPTIONAL - if unset the oracle is the recipient)\\n     * @param minAttestations size * (1 / minAttestations) + 1 is the minimum number of oracles required to attest to a registration\\n     * @param toleratedTimestampDelta The default maximum staleness for a valid feed result\\n     * @param resultsMaxSize The maximum size of the results array\\n     * @param oracleValidityLength The length of time an oracle is valid for\\n     * @param mrEnclaves The enclave measurements allowed by the queue\\n     * @param oracles The oracles associated with the queue\\n     * @param toleratedBlocksStaleness The number of blocks a timestamp is allowed to be stale\\n     * @param lastQueueOverride The last time the queue was overridden\\n     * @param guardianQueueId The guardian queue id\\n     */\\n    struct Queue {\\n        bytes32 queueId;\\n        address authority;\\n        string name;\\n        uint256 fee;\\n        address feeRecipient;\\n        uint64 minAttestations;\\n        uint256 toleratedTimestampDelta;\\n        uint8 resultsMaxSize;\\n        uint256 oracleValidityLength;\\n        bytes32[] mrEnclaves;\\n        bytes32[] oracles;\\n        uint256 toleratedBlocksStaleness;\\n        uint256 lastQueueOverride;\\n        bytes32 guardianQueueId;\\n    }\\n\\n    /**\\n     * Oracle - A more dense version of the oracle\\n     * @param authority the oracle's enclave secp key\\n     * @param owner the owner of the oracle\\n     * @param oracleId the oracle's id (hexified pubkey from solana)\\n     * @param queueId the queue that the oracle belongs to\\n     * @param mrEnclave the oracle's enclave measurement\\n     * @param expirationTime the time the oracle expires\\n     * @param feesOwed the fees owed to the oracle\\n     */\\n    struct Oracle {\\n        address authority;\\n        address owner;\\n        bytes32 oracleId;\\n        bytes32 queueId;\\n        bytes32 mrEnclave;\\n        uint256 expirationTime;\\n        uint256 feesOwed;\\n    }\\n\\n    /**\\n     * Pending Oracle Registration\\n     * @param oracle The oracle to be registered\\n     * @param attestingOracle The oracle attesting to the registration\\n     */\\n    struct OracleAttestation {\\n        address oracleAuthority;\\n        bytes32 oracleId;\\n        bytes32 attestingOracle;\\n        uint256 timestamp;\\n        bytes32 mrEnclave;\\n    }\\n\\n    /**\\n     * Randomness - a message resolving randomness\\n     * @param randId The randomness id\\n     * @param queueId The queue id\\n     * @param createdAt The time the randomness was created\\n     * @param authority The authority of the randomness\\n     * @param rollTimestamp The timestamp of the latest roll\\n     * @param minSettlementDelay The minimum settlement delay seconds\\n     * @param result The value of the randomness (uint256)\\n     */\\n    struct Randomness {\\n        bytes32 randId;\\n        bytes32 queueId;\\n        uint256 createdAt;\\n        address authority;\\n        uint256 rollTimestamp;\\n        uint64 minSettlementDelay;\\n        RandomnessResult result;\\n    }\\n\\n    /**\\n     * Randomness Result\\n     * @param oracleId The oracle id\\n     * @param oracleAuthority The authority of the oracle that provided the randomness\\n     * @param value The value of the randomness\\n     * @param settledAt The time the randomness was settled\\n     */\\n    struct RandomnessResult {\\n        bytes32 oracleId;\\n        address oracleAuthority;\\n        uint256 value;\\n        uint256 settledAt;\\n    }\\n\\n    /**\\n     * Attestations\\n     * @param list The list of pending attestations\\n     */\\n    struct Attestations {\\n        OracleAttestation[] list;\\n    }\\n}\\n\",\"keccak256\":\"0xf4df26289c2798c0314d14305e96fc3d3043b0fb8d8ce94f398b8ddb3e8fe1f1\",\"license\":\"UNLICENSED\"},\"contracts/Leaderboard/Leaderboard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport { AccessControlUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ncontract Leaderboard is \\n    UUPSUpgradeable,\\n    AccessControlUpgradeable {\\n    bytes32 private constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 private constant GAME_ROLE = keccak256(\\\"GAME_ROLE\\\");\\n    bytes32 private constant WITHDRAWER = keccak256(\\\"WITHDRAWER\\\");\\n    uint256 private constant FEE_DENOMINATOR = 10_000;\\n\\n    //////////////\\n    /// Storage\\n    //////////////\\n    mapping(address => uint256) public points;\\n    mapping(address => uint256) public pendingReward;\\n    uint256 public betFee;\\n    uint256 public minBet;\\n    uint256 public maxBet;\\n    address public feeReceiver;\\n    uint256 public govFee;\\n    address public govAddress;\\n\\n    //////////////\\n    /// Events\\n    //////////////\\n    event NewPoint(\\n        uint256 gameId,\\n        address user,\\n        uint256 earnAmount,\\n        uint256 betAmount\\n    );\\n    event Withdraw(address user, uint256 amount);\\n    event Deposit(address user, uint256 amount);\\n    event ClaimReward(address user, uint256 amount);\\n\\n    //////////////\\n    /// Constructor\\n    //////////////\\n    function initialize() public initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n        __UUPSUpgradeable_init();\\n\\n        address sender = _msgSender();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, sender);\\n        _grantRole(ADMIN_ROLE, sender);\\n        _grantRole(GAME_ROLE, sender);\\n        _grantRole(WITHDRAWER, sender);\\n\\n        betFee = 350;\\n        minBet = 25 ether / 100_000; // 0.00025\\n        maxBet = 2 ether / 100; // 0.02\\n        govFee = 1 ether / 1_000_000; // 0.000001\\n\\n        feeReceiver = sender;\\n        govAddress = sender;\\n    }\\n\\n    function takeFee() public payable returns (uint256 betAmount, uint256 fee) {\\n        uint256 _betAmountBeforeFee = msg.value - govFee;\\n        betAmount =\\n            (_betAmountBeforeFee * FEE_DENOMINATOR) /\\n            (FEE_DENOMINATOR + betFee);\\n        require(betAmount >= minBet && betAmount <= maxBet, \\\"invalid bet\\\");\\n\\n        fee = _betAmountBeforeFee - betAmount;\\n\\n        payable(govAddress).transfer(govFee);\\n        payable(feeReceiver).transfer(fee);\\n    }\\n\\n    function takeFeeWithAttemp(uint256 attempts) public payable returns (uint256 betAmount, uint256 fee) {\\n        uint256 _betAmountBeforeFee = msg.value - govFee;\\n        betAmount =\\n            (_betAmountBeforeFee * FEE_DENOMINATOR) /\\n            (FEE_DENOMINATOR + betFee);\\n        require(betAmount >= minBet*attempts && betAmount <= maxBet*attempts, \\\"invalid bet\\\");\\n\\n        fee = _betAmountBeforeFee - betAmount;\\n\\n        payable(govAddress).transfer(govFee);\\n        payable(feeReceiver).transfer(fee);\\n    }\\n\\n    function setBetFee(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        betFee = val;\\n    }\\n\\n    function setMinBet(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        require(val <= maxBet, \\\"invalid bet\\\");\\n        minBet = val;\\n    }\\n\\n    function setMaxBet(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        require(val >= minBet, \\\"invalid bet\\\");\\n        maxBet = val;\\n    }\\n\\n    function setGovFee(uint256 val) public onlyRole(ADMIN_ROLE) {\\n        govFee = val;\\n    }\\n\\n    function setFeeReceiver(address receiver) public onlyRole(ADMIN_ROLE) {\\n        feeReceiver = receiver;\\n    }\\n\\n    function setGovAddress(address gov) public onlyRole(ADMIN_ROLE) {\\n        govAddress = gov;\\n    }\\n\\n    function withdrawAll(address addr) external onlyRole(WITHDRAWER) {\\n        address payable _to = payable(addr);\\n        _to.transfer(address(this).balance);\\n        emit Withdraw(msg.sender, address(this).balance);\\n    }\\n\\n    function withdraw(\\n        address addr,\\n        uint256 amount\\n    ) external onlyRole(WITHDRAWER) {\\n        uint256 balance = address(this).balance;\\n        require(amount <= balance, \\\"invalid amount\\\");\\n        address payable _to = payable(addr);\\n        _to.transfer(amount);\\n        emit Withdraw(msg.sender, amount);\\n    }\\n\\n    function earnReward(\\n        uint256 gameId,\\n        address user,\\n        uint256 earnAmount,\\n        uint256 betAmount\\n    ) external onlyRole(GAME_ROLE) {\\n        if (earnAmount > 0) {\\n            pendingReward[user] += earnAmount;\\n            if (earnAmount > betAmount) {\\n                points[user] += (earnAmount - betAmount);\\n                emit NewPoint(gameId, user, earnAmount, betAmount);\\n            }\\n        }\\n    }\\n\\n    function claimReward() external {\\n        uint256 earnAmount = pendingReward[_msgSender()];\\n        require(earnAmount > 0, \\\"no reward\\\");\\n        pendingReward[_msgSender()] = 0;\\n        payable(_msgSender()).transfer(earnAmount);\\n\\n        emit ClaimReward(_msgSender(), earnAmount);\\n    }\\n\\n    function deposit() public payable {\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyRole(ADMIN_ROLE) {}\\n}\\n\",\"keccak256\":\"0x370b88ecc8892318f537b94c14281de9f2d0b2cd987f20df33cb13b7e4bc4823\",\"license\":\"MIT\"},\"contracts/Plinko/Plinko.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Leaderboard/Leaderboard.sol\\\";\\nimport { SwResolver } from \\\"../SwResolver.sol\\\";\\nimport {Structs} from \\\"@switchboard-xyz/on-demand-solidity/structs/Structs.sol\\\";\\nimport {ISwitchboard} from \\\"@switchboard-xyz/on-demand-solidity/ISwitchboard.sol\\\";\\nimport { AccessControlUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport { PausableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ncontract Plinko is UUPSUpgradeable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable,\\n    SwResolver {\\n\\n    // -----------\\n    /// Structs\\n    // -----------\\n    struct BetInfo {\\n        address user;\\n        bool degen;\\n        uint256 balls;\\n        uint256 betAmount;\\n    }\\n\\n    // -----------\\n    /// Constants\\n    // -----------\\n    bytes32 private constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    uint256 private constant DEGEN_LENGTH = 49;\\n    uint256 private constant BASIC_LENGTH = 66;\\n    uint256 private constant MAX_MULTIPLIER = 1500;\\n    uint256 public constant GAME_ID = 3;\\n\\n    // -----------\\n    /// Storages\\n    // -----------\\n    uint256 public totalGame;\\n    address public leaderboard;\\n    mapping(uint256 => uint256) public degenMultiplier;\\n    mapping(uint256 => uint256) public basicMultiplier;\\n    mapping(uint256 => BetInfo) public gameIdToBetInfo;\\n\\n    // -----------\\n    // Events\\n    // -----------\\n    event NewBet(address indexed user, uint256 indexed gameId, uint256 totalBetAmount, uint256 balls, uint256 fee);\\n    event Game(address indexed user, uint256 indexed gameId, uint256 totalBetAmount, uint256 balls, uint256 payout);\\n    event Ball(uint256 indexed gameId, uint256 multiplier);\\n\\n    function initialize(address leaderboard_, address switchboard_, bytes32 swQueue_) public initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n        __Pausable_init_unchained();\\n        __UUPSUpgradeable_init();\\n\\n        address sender = _msgSender();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, sender);\\n        _grantRole(ADMIN_ROLE, sender);\\n\\n        leaderboard = leaderboard_;\\n\\n        // Degen\\n        degenMultiplier[43] = 200;\\n        degenMultiplier[44] = 200;\\n        degenMultiplier[45] = 1000;\\n        degenMultiplier[46] = 1000;\\n        degenMultiplier[47] = 1000;\\n        degenMultiplier[48] = 1500;\\n\\n        // Basic\\n        for (uint256 i = 0; i < 48; i++) basicMultiplier[i] = 50;\\n        for (uint256 i = 48; i < 58; i++) basicMultiplier[i] = 150;\\n        for (uint256 i = 58; i < 65; i++) basicMultiplier[i] = 300;\\n        basicMultiplier[65] = 600;\\n\\n        // Setup VRF\\n        setupResolver(switchboard_, swQueue_);\\n    }\\n\\n    function plinko(bool degen, uint256 balls) external payable whenNotPaused {\\n\\n        address sender = _msgSender();\\n        // take fee\\n        (uint256 _betAmount, uint256 fee) = Leaderboard(leaderboard).takeFeeWithAttemp{\\n            value: msg.value\\n        }(balls);\\n\\n        uint256 gameId = totalGame + 1;\\n        requestRandomNumber(gameId);\\n        BetInfo memory betInfo = BetInfo({\\n            user: sender,\\n            degen: degen,\\n            balls: balls,\\n            betAmount: _betAmount\\n        });\\n        gameIdToBetInfo[gameId] = betInfo;\\n\\n        totalGame = gameId;\\n\\n        // New Bet\\n        emit NewBet(sender, gameId, _betAmount, balls, fee);\\n    }\\n\\n    // handle entropy callback\\n    function handleRandomNumber(\\n        uint256 gameId,\\n        uint256 randomNumber\\n    ) internal override whenNotPaused {\\n        BetInfo storage betInfo = gameIdToBetInfo[gameId];\\n        uint256 balls = betInfo.balls;\\n        bool degen = betInfo.degen;\\n        uint256 betAmount = betInfo.betAmount;\\n        address user = betInfo.user;\\n\\n        if (\\n            betAmount == 0\\n        ) {\\n            // The game is ended\\n            return;\\n        }\\n        // Set bet amount to zero to prevent re-entrancy\\n        betInfo.betAmount = 0;\\n\\n        uint256 totalRate = degen ? DEGEN_LENGTH : BASIC_LENGTH;\\n\\n        // check result\\n        uint totalRewardAmount = 0;\\n        uint256 betEachBall = betAmount / balls;\\n        for (uint256 i = 0; i < balls; i++) {\\n            uint256 rand = getRandomUint(randomNumber + i);\\n            uint256 randIndex = rand % totalRate;\\n\\n            uint256 multiplier = degen\\n                ? degenMultiplier[randIndex]\\n                : basicMultiplier[randIndex];\\n            uint rewardAmount = (multiplier * betEachBall) / 100;\\n            totalRewardAmount += rewardAmount;\\n            emit Ball(gameId, multiplier);\\n        }\\n        emit Game(user, gameId, betAmount, balls, totalRewardAmount);\\n\\n        Leaderboard(leaderboard).earnReward(\\n            GAME_ID,\\n            user,\\n            totalRewardAmount,\\n            betAmount\\n        );\\n    }\\n\\n    function setLeaderboard(address leaderboard_) public onlyRole(ADMIN_ROLE) {\\n        leaderboard = leaderboard_;\\n    }\\n\\n    /**\\n     * @dev called by the owner to pause, triggers stopped state\\n     */\\n    function pause() external onlyRole(ADMIN_ROLE) whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev called by the owner to unpause, returns to normal state\\n     */\\n    function unpause() external onlyRole(ADMIN_ROLE) whenPaused {\\n        _unpause();\\n    }\\n\\n    receive() external payable {}\\n\\n    function getRandomUint(uint256 i) internal view returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(block.number, totalGame, msg.sender, i)\\n                )\\n            );\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyRole(ADMIN_ROLE) {}\\n}\\n\",\"keccak256\":\"0x6c3bb7e5fe0b703afcc3be9560680458fbd2d954e92d9c1eb2323f08fa8071d0\",\"license\":\"MIT\"},\"contracts/SwResolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {Structs} from \\\"@switchboard-xyz/on-demand-solidity/structs/Structs.sol\\\";\\nimport {ISwitchboard} from \\\"@switchboard-xyz/on-demand-solidity/ISwitchboard.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract SwResolver is Initializable {\\n    address private _switchboard;\\n    bytes32 public queue;\\n    uint256 public sequence;\\n    uint256 public solvedSeq;\\n    mapping(uint256 => uint256) public seq2GameId;\\n\\n    event RandomRequested(uint256 sequence);\\n    \\n    // https://docs.switchboard.xyz/product-documentation/randomness/tutorials/evm\\n    function setupResolver(address switchboard_, bytes32 swQueue_) internal initializer {\\n        queue = swQueue_;\\n        _switchboard = switchboard_;\\n    }\\n\\n    function requestRandomNumber(uint256 gameId) internal {\\n        require(seq2GameId[gameId] == 0, \\\"Game exists\\\");\\n\\n        sequence += 1;\\n        ISwitchboard(_switchboard).requestRandomness(\\n            bytes32(sequence),        // randomnessId (bytes32): Unique ID for the request.\\n            address(this),            // authority (address):  Only this contract should manage randomness. \\n            queue,                    // queueId (bytes32 ): Chain selection for requesting randomness.\\n            1                         // minSettlementDelay (uint16): Minimum seconds to settle the request.\\n        );\\n\\n        // Store the number to identify the callback request\\n        seq2GameId[sequence] = gameId;\\n\\n        emit RandomRequested(sequence);\\n    }\\n\\n    function resolve(\\n        bytes[] calldata switchboardUpdateFeeds,\\n        uint256 seq\\n    ) external {\\n        uint256 gameId = seq2GameId[seq];\\n\\n        require(seq == solvedSeq + 1 && gameId != 0, \\\"invalid seq\\\");\\n        solvedSeq = seq;\\n\\n        // invoke\\n        ISwitchboard(_switchboard).updateFeeds(switchboardUpdateFeeds);\\n\\n        Structs.RandomnessResult memory randomness = ISwitchboard(_switchboard).getRandomness(bytes32(solvedSeq)).result;\\n        require(randomness.settledAt != 0, \\\"Randomness failed to Settle\\\");\\n\\n        handleRandomNumber(gameId, randomness.value);\\n    }\\n\\n    function handleRandomNumber(\\n        uint256 gameId,\\n        uint256 randomNumber\\n    ) internal virtual;\\n}\",\"keccak256\":\"0x2c62cbc033aed5bf0cb294d5b02e48108c781388efceda20c68e11a9359efae2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b506080516122cc61003e600039600081816111bf015281816111e8015261138801526122cc6000f3fe6080604052600436106101b05760003560e01c80636d48b118116100ec578063d272e57e1161008a578063e10d29ee11610064578063e10d29ee146105a0578063eb56b740146105b6578063f1a2de72146105ee578063fdcdb06b1461060e57600080fd5b8063d272e57e146104ef578063d547741f14610505578063dfad729a1461052557600080fd5b806391d14854116100c657806391d148541461040c578063a217fddf14610471578063ad3cb1cc14610486578063cc895fa5146104dc57600080fd5b80636d48b118146103aa5780637f6a0cba146103ca5780638456cb59146103f757600080fd5b806336568abe11610159578063529d15cc11610133578063529d15cc1461032857806352d1902d1461033e5780635c975abb146103535780636133f9851461038a57600080fd5b806336568abe146102e05780633f4ba83a146103005780634f1ef2861461031557600080fd5b8063248a9ca31161018a578063248a9ca31461024257806328681024146102915780632f2ff15d146102be57600080fd5b806301ffc9a7146101bc5780630ebbe0ad146101f157806323ffc7791461022c57600080fd5b366101b757005b600080fd5b3480156101c857600080fd5b506101dc6101d7366004611ce7565b610623565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b5061021e61020c366004611d29565b60086020526000908152604090205481565b6040519081526020016101e8565b34801561023857600080fd5b5061021e60035481565b34801561024e57600080fd5b5061021e61025d366004611d29565b60009081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b34801561029d57600080fd5b5061021e6102ac366004611d29565b60076020526000908152604090205481565b3480156102ca57600080fd5b506102de6102d9366004611d57565b6106bc565b005b3480156102ec57600080fd5b506102de6102fb366004611d57565b610706565b34801561030c57600080fd5b506102de610757565b6102de610323366004611df7565b610794565b34801561033457600080fd5b5061021e60025481565b34801561034a57600080fd5b5061021e6107b3565b34801561035f57600080fd5b507fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005460ff166101dc565b34801561039657600080fd5b506102de6103a5366004611e9f565b6107e2565b3480156103b657600080fd5b506102de6103c5366004611ee0565b610aff565b3480156103d657600080fd5b5061021e6103e5366004611d29565b60046020526000908152604090205481565b34801561040357600080fd5b506102de610cf7565b34801561041857600080fd5b506101dc610427366004611d57565b60009182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561047d57600080fd5b5061021e600081565b34801561049257600080fd5b506104cf6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b6040516101e89190611f7f565b6102de6104ea366004611fb2565b610d31565b3480156104fb57600080fd5b5061021e60055481565b34801561051157600080fd5b506102de610520366004611d57565b610ec7565b34801561053157600080fd5b50610576610540366004611d29565b6009602052600090815260409020805460018201546002909201546001600160a01b03821692600160a01b90920460ff16919084565b604080516001600160a01b03909516855292151560208501529183015260608201526080016101e8565b3480156105ac57600080fd5b5061021e60015481565b3480156105c257600080fd5b506006546105d6906001600160a01b031681565b6040516001600160a01b0390911681526020016101e8565b3480156105fa57600080fd5b506102de610609366004611fe3565b610f0b565b34801561061a57600080fd5b5061021e600381565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806106b657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260409020600101546106f681610f65565b6107008383610f6f565b50505050565b6001600160a01b0381163314610748576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610752828261103e565b505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561078181610f65565b6107896110e4565b610791611141565b50565b61079c6111b4565b6107a58261126b565b6107af8282611295565b5050565b60006107bd61137d565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006107ec6113c6565b805490915060ff68010000000000000000820416159067ffffffffffffffff166000811580156108195750825b905060008267ffffffffffffffff1660011480156108365750303b155b905081158015610844575080155b156108625760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561089657845468ff00000000000000001916680100000000000000001785555b61089e6113ef565b6108a66113ef565b6108ae6113ef565b6108b66113ef565b336108c2600082610f6f565b506108ed7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582610f6f565b506006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038b16179055600760205260c87feec123b2fdbe86f4f5bc78302d7f5a15762e0c954439f75677c94278d2bcf8fd8190557fd9ba031fdb7d71bd061083980d5807d26bb2fade193f918e92821956bfdda35a556103e87ff61dffaafadc06c51bab3d00b0e2d57a6471368c7ae68dc2c923be5b2842e9208190557fa9a18f421c88b5456819057fb70bd58beec0e03163991994ad8d80ed30deeaf38190557f6ad70a4b2f0ce5a5b5e387d4bc4ae7958c0f01a0b5fba90a2c0b1a9391f068c855603060009081526105dc7f1d90d70aa2b160f0d0cfe0186ccfd5809afb328c84784403875176cf0cca882b555b6030811015610a20576000818152600860205260409020603290556001016109fd565b5060305b603a811015610a4757600081815260086020526040902060969055600101610a24565b50603a5b6041811015610a6f57600081815260086020526040902061012c9055600101610a4b565b50604160005260086020526102587f8518cb14e45c395bda28aa62494aabf636d200f9e24b1d91170bd743d557784155610aa988886113f7565b508315610af557845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b600081815260046020526040902054600354610b1c906001612016565b82148015610b2957508015155b610b7a5760405162461bcd60e51b815260206004820152600b60248201527f696e76616c69642073657100000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60038290556000546040517fbc36c0a90000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063bc36c0a990610bca9087908790600401612052565b600060405180830381600087803b158015610be457600080fd5b505af1158015610bf8573d6000803e3d6000fd5b5050600080546003546040517f05b1940200000000000000000000000000000000000000000000000000000000815260048101919091529193506001600160a01b031691506305b194029060240161014060405180830381865afa158015610c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c88919061215f565b60c0015190508060600151600003610ce25760405162461bcd60e51b815260206004820152601b60248201527f52616e646f6d6e657373206661696c656420746f20536574746c6500000000006044820152606401610b71565b610cf082826040015161152c565b5050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610d2181610f65565b610d29611756565b6107916117b2565b610d39611756565b6000336006546040517fdcb99ca10000000000000000000000000000000000000000000000000000000081526004810185905291925060009182916001600160a01b03169063dcb99ca1903490602401604080518083038185885af1158015610da6573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610dcb91906121e8565b9150915060006005546001610de09190612016565b9050610deb8161180d565b604080516080810182526001600160a01b0386811680835289151560208085019182528486018b815260608087018b815260008a8152600985528990208851815496511515600160a01b027fffffffffffffffffffffff000000000000000000000000000000000000000000909716981697909717949094178655905160018601559151600290940193909355600586905584518881529283018a905293820186905291928492917f4fa11c75379b17cc9056d50bf3bf6c483007435626712395a1accf779e91d3be910160405180910390a350505050505050565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154610f0181610f65565b610700838361103e565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610f3581610f65565b506006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610791813361195a565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff16611034576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055610fea3390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506106b6565b60009150506106b6565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff1615611034576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460019150506106b6565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005460ff1661113f576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6111496110e4565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b0390911681526020015b60405180910390a150565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061124d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112417f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614155b1561113f5760405163703e46dd60e11b815260040160405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756107af81610f65565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156112ef575060408051601f3d908101601f191682019092526112ec9181019061220c565b60015b61131757604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610b71565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611373576040517faa1d49a400000000000000000000000000000000000000000000000000000000815260048101829052602401610b71565b61075283836119e7565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461113f5760405163703e46dd60e11b815260040160405180910390fd5b6000807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a006106b6565b61113f611a3d565b60006114016113c6565b805490915060ff68010000000000000000820416159067ffffffffffffffff1660008115801561142e5750825b905060008267ffffffffffffffff16600114801561144b5750303b155b905081158015611459575080155b156114775760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156114ab57845468ff00000000000000001916680100000000000000001785555b60018690556000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038916179055831561152357845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b611534611756565b60008281526009602052604081206001810154815460028301549293919260ff600160a01b8304169290916001600160a01b0316908290036115795750505050505050565b6000600286018190558361158e576042611591565b60315b90506000806115a0878661223b565b905060005b8781101561166e5760006115c16115bc838d612016565b611a7b565b905060006115cf868361224f565b90506000896115ec576000828152600860205260409020546115fc565b6000828152600760205260409020545b90506000606461160c8784612263565b611616919061223b565b90506116228188612016565b96508e7fbf2a368ad5ca26039547c3a89924d01f27caa750522e99264c6962c02708d64b8360405161165691815260200190565b60405180910390a25050600190920191506115a59050565b5060408051868152602081018990529081018390528a906001600160a01b038616907f8d6f739ebabe97de0fcfa22e9634fd6ec7f4b401fa2f959b3386299e635207be9060600160405180910390a36006546040517f83fbaae2000000000000000000000000000000000000000000000000000000008152600360048201526001600160a01b0386811660248301526044820185905260648201889052909116906383fbaae290608401600060405180830381600087803b15801561173257600080fd5b505af1158015611746573d6000803e3d6000fd5b5050505050505050505050505050565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005460ff161561113f576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117ba611756565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833611195565b600081815260046020526040902054156118695760405162461bcd60e51b815260206004820152600b60248201527f47616d65206578697374730000000000000000000000000000000000000000006044820152606401610b71565b60016002600082825461187c9190612016565b9091555050600054600254600180546040517ff4bc77f70000000000000000000000000000000000000000000000000000000081526004810193909352306024840152604483015260648201526001600160a01b039091169063f4bc77f790608401600060405180830381600087803b1580156118f857600080fd5b505af115801561190c573d6000803e3d6000fd5b50506002805460009081526004602052604090819020859055905490517ff81446731d23d202ea16cf590daf64c6087251171612b2adde6acbef4b37580293506111a9925090815260200190565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408083206001600160a01b038516845290915290205460ff166107af576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260248101839052604401610b71565b6119f082611adc565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611a35576107528282611b60565b6107af611bd6565b611a45611c0e565b61113f576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000436005543384604051602001611abe9493929190938452602084019290925260601b6bffffffffffffffffffffffff19166040830152605482015260740190565b60408051601f19818403018152919052805160209091012092915050565b806001600160a01b03163b600003611b1257604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610b71565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051611b7d919061227a565b600060405180830381855af49150503d8060008114611bb8576040519150601f19603f3d011682016040523d82523d6000602084013e611bbd565b606091505b5091509150611bcd858383611c2d565b95945050505050565b341561113f576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611c186113c6565b5468010000000000000000900460ff16919050565b606082611c4257611c3d82611ca5565b611c9e565b8151158015611c5957506001600160a01b0384163b155b15611c9b576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610b71565b50805b9392505050565b805115611cb55780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208284031215611cf957600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611c9e57600080fd5b600060208284031215611d3b57600080fd5b5035919050565b6001600160a01b038116811461079157600080fd5b60008060408385031215611d6a57600080fd5b823591506020830135611d7c81611d42565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715611dc057611dc0611d87565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611def57611def611d87565b604052919050565b60008060408385031215611e0a57600080fd5b8235611e1581611d42565b915060208381013567ffffffffffffffff80821115611e3357600080fd5b818601915086601f830112611e4757600080fd5b813581811115611e5957611e59611d87565b611e6b601f8201601f19168501611dc6565b91508082528784828501011115611e8157600080fd5b80848401858401376000848284010152508093505050509250929050565b600080600060608486031215611eb457600080fd5b8335611ebf81611d42565b92506020840135611ecf81611d42565b929592945050506040919091013590565b600080600060408486031215611ef557600080fd5b833567ffffffffffffffff80821115611f0d57600080fd5b818601915086601f830112611f2157600080fd5b813581811115611f3057600080fd5b8760208260051b8501011115611f4557600080fd5b6020928301989097509590910135949350505050565b60005b83811015611f76578181015183820152602001611f5e565b50506000910152565b6020815260008251806020840152611f9e816040850160208701611f5b565b601f01601f19169190910160400192915050565b60008060408385031215611fc557600080fd5b82358015158114611fd557600080fd5b946020939093013593505050565b600060208284031215611ff557600080fd5b8135611c9e81611d42565b634e487b7160e01b600052601160045260246000fd5b808201808211156106b6576106b6612000565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208082528181018390526000906040600585901b8401810190840186845b878110156120e157868403603f190183528135368a9003601e1901811261209757600080fd5b8901858101903567ffffffffffffffff8111156120b357600080fd5b8036038213156120c257600080fd5b6120cd868284612029565b955050509184019190840190600101612071565b5091979650505050505050565b60006080828403121561210057600080fd5b6040516080810181811067ffffffffffffffff8211171561212357612123611d87565b806040525080915082518152602083015161213d81611d42565b8060208301525060408301516040820152606083015160608201525092915050565b6000610140828403121561217257600080fd5b61217a611d9d565b82518152602083015160208201526040830151604082015260608301516121a081611d42565b60608201526080838101519082015260a083015167ffffffffffffffff811681146121ca57600080fd5b60a08201526121dc8460c085016120ee565b60c08201529392505050565b600080604083850312156121fb57600080fd5b505080516020909101519092909150565b60006020828403121561221e57600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b60008261224a5761224a612225565b500490565b60008261225e5761225e612225565b500690565b80820281158282048414176106b6576106b6612000565b6000825161228c818460208701611f5b565b919091019291505056fea26469706673582212208dca471626d6662480d5d0562156b628c780d3b373fa499878f7647c164202f064736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106101b05760003560e01c80636d48b118116100ec578063d272e57e1161008a578063e10d29ee11610064578063e10d29ee146105a0578063eb56b740146105b6578063f1a2de72146105ee578063fdcdb06b1461060e57600080fd5b8063d272e57e146104ef578063d547741f14610505578063dfad729a1461052557600080fd5b806391d14854116100c657806391d148541461040c578063a217fddf14610471578063ad3cb1cc14610486578063cc895fa5146104dc57600080fd5b80636d48b118146103aa5780637f6a0cba146103ca5780638456cb59146103f757600080fd5b806336568abe11610159578063529d15cc11610133578063529d15cc1461032857806352d1902d1461033e5780635c975abb146103535780636133f9851461038a57600080fd5b806336568abe146102e05780633f4ba83a146103005780634f1ef2861461031557600080fd5b8063248a9ca31161018a578063248a9ca31461024257806328681024146102915780632f2ff15d146102be57600080fd5b806301ffc9a7146101bc5780630ebbe0ad146101f157806323ffc7791461022c57600080fd5b366101b757005b600080fd5b3480156101c857600080fd5b506101dc6101d7366004611ce7565b610623565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b5061021e61020c366004611d29565b60086020526000908152604090205481565b6040519081526020016101e8565b34801561023857600080fd5b5061021e60035481565b34801561024e57600080fd5b5061021e61025d366004611d29565b60009081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b34801561029d57600080fd5b5061021e6102ac366004611d29565b60076020526000908152604090205481565b3480156102ca57600080fd5b506102de6102d9366004611d57565b6106bc565b005b3480156102ec57600080fd5b506102de6102fb366004611d57565b610706565b34801561030c57600080fd5b506102de610757565b6102de610323366004611df7565b610794565b34801561033457600080fd5b5061021e60025481565b34801561034a57600080fd5b5061021e6107b3565b34801561035f57600080fd5b507fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005460ff166101dc565b34801561039657600080fd5b506102de6103a5366004611e9f565b6107e2565b3480156103b657600080fd5b506102de6103c5366004611ee0565b610aff565b3480156103d657600080fd5b5061021e6103e5366004611d29565b60046020526000908152604090205481565b34801561040357600080fd5b506102de610cf7565b34801561041857600080fd5b506101dc610427366004611d57565b60009182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561047d57600080fd5b5061021e600081565b34801561049257600080fd5b506104cf6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b6040516101e89190611f7f565b6102de6104ea366004611fb2565b610d31565b3480156104fb57600080fd5b5061021e60055481565b34801561051157600080fd5b506102de610520366004611d57565b610ec7565b34801561053157600080fd5b50610576610540366004611d29565b6009602052600090815260409020805460018201546002909201546001600160a01b03821692600160a01b90920460ff16919084565b604080516001600160a01b03909516855292151560208501529183015260608201526080016101e8565b3480156105ac57600080fd5b5061021e60015481565b3480156105c257600080fd5b506006546105d6906001600160a01b031681565b6040516001600160a01b0390911681526020016101e8565b3480156105fa57600080fd5b506102de610609366004611fe3565b610f0b565b34801561061a57600080fd5b5061021e600381565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806106b657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260409020600101546106f681610f65565b6107008383610f6f565b50505050565b6001600160a01b0381163314610748576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610752828261103e565b505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561078181610f65565b6107896110e4565b610791611141565b50565b61079c6111b4565b6107a58261126b565b6107af8282611295565b5050565b60006107bd61137d565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60006107ec6113c6565b805490915060ff68010000000000000000820416159067ffffffffffffffff166000811580156108195750825b905060008267ffffffffffffffff1660011480156108365750303b155b905081158015610844575080155b156108625760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561089657845468ff00000000000000001916680100000000000000001785555b61089e6113ef565b6108a66113ef565b6108ae6113ef565b6108b66113ef565b336108c2600082610f6f565b506108ed7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582610f6f565b506006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038b16179055600760205260c87feec123b2fdbe86f4f5bc78302d7f5a15762e0c954439f75677c94278d2bcf8fd8190557fd9ba031fdb7d71bd061083980d5807d26bb2fade193f918e92821956bfdda35a556103e87ff61dffaafadc06c51bab3d00b0e2d57a6471368c7ae68dc2c923be5b2842e9208190557fa9a18f421c88b5456819057fb70bd58beec0e03163991994ad8d80ed30deeaf38190557f6ad70a4b2f0ce5a5b5e387d4bc4ae7958c0f01a0b5fba90a2c0b1a9391f068c855603060009081526105dc7f1d90d70aa2b160f0d0cfe0186ccfd5809afb328c84784403875176cf0cca882b555b6030811015610a20576000818152600860205260409020603290556001016109fd565b5060305b603a811015610a4757600081815260086020526040902060969055600101610a24565b50603a5b6041811015610a6f57600081815260086020526040902061012c9055600101610a4b565b50604160005260086020526102587f8518cb14e45c395bda28aa62494aabf636d200f9e24b1d91170bd743d557784155610aa988886113f7565b508315610af557845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b600081815260046020526040902054600354610b1c906001612016565b82148015610b2957508015155b610b7a5760405162461bcd60e51b815260206004820152600b60248201527f696e76616c69642073657100000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60038290556000546040517fbc36c0a90000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063bc36c0a990610bca9087908790600401612052565b600060405180830381600087803b158015610be457600080fd5b505af1158015610bf8573d6000803e3d6000fd5b5050600080546003546040517f05b1940200000000000000000000000000000000000000000000000000000000815260048101919091529193506001600160a01b031691506305b194029060240161014060405180830381865afa158015610c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c88919061215f565b60c0015190508060600151600003610ce25760405162461bcd60e51b815260206004820152601b60248201527f52616e646f6d6e657373206661696c656420746f20536574746c6500000000006044820152606401610b71565b610cf082826040015161152c565b5050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610d2181610f65565b610d29611756565b6107916117b2565b610d39611756565b6000336006546040517fdcb99ca10000000000000000000000000000000000000000000000000000000081526004810185905291925060009182916001600160a01b03169063dcb99ca1903490602401604080518083038185885af1158015610da6573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610dcb91906121e8565b9150915060006005546001610de09190612016565b9050610deb8161180d565b604080516080810182526001600160a01b0386811680835289151560208085019182528486018b815260608087018b815260008a8152600985528990208851815496511515600160a01b027fffffffffffffffffffffff000000000000000000000000000000000000000000909716981697909717949094178655905160018601559151600290940193909355600586905584518881529283018a905293820186905291928492917f4fa11c75379b17cc9056d50bf3bf6c483007435626712395a1accf779e91d3be910160405180910390a350505050505050565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154610f0181610f65565b610700838361103e565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610f3581610f65565b506006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610791813361195a565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff16611034576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055610fea3390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506106b6565b60009150506106b6565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff1615611034576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460019150506106b6565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005460ff1661113f576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6111496110e4565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b0390911681526020015b60405180910390a150565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061124d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112417f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614155b1561113f5760405163703e46dd60e11b815260040160405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756107af81610f65565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156112ef575060408051601f3d908101601f191682019092526112ec9181019061220c565b60015b61131757604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610b71565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611373576040517faa1d49a400000000000000000000000000000000000000000000000000000000815260048101829052602401610b71565b61075283836119e7565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461113f5760405163703e46dd60e11b815260040160405180910390fd5b6000807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a006106b6565b61113f611a3d565b60006114016113c6565b805490915060ff68010000000000000000820416159067ffffffffffffffff1660008115801561142e5750825b905060008267ffffffffffffffff16600114801561144b5750303b155b905081158015611459575080155b156114775760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156114ab57845468ff00000000000000001916680100000000000000001785555b60018690556000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038916179055831561152357845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b611534611756565b60008281526009602052604081206001810154815460028301549293919260ff600160a01b8304169290916001600160a01b0316908290036115795750505050505050565b6000600286018190558361158e576042611591565b60315b90506000806115a0878661223b565b905060005b8781101561166e5760006115c16115bc838d612016565b611a7b565b905060006115cf868361224f565b90506000896115ec576000828152600860205260409020546115fc565b6000828152600760205260409020545b90506000606461160c8784612263565b611616919061223b565b90506116228188612016565b96508e7fbf2a368ad5ca26039547c3a89924d01f27caa750522e99264c6962c02708d64b8360405161165691815260200190565b60405180910390a25050600190920191506115a59050565b5060408051868152602081018990529081018390528a906001600160a01b038616907f8d6f739ebabe97de0fcfa22e9634fd6ec7f4b401fa2f959b3386299e635207be9060600160405180910390a36006546040517f83fbaae2000000000000000000000000000000000000000000000000000000008152600360048201526001600160a01b0386811660248301526044820185905260648201889052909116906383fbaae290608401600060405180830381600087803b15801561173257600080fd5b505af1158015611746573d6000803e3d6000fd5b5050505050505050505050505050565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005460ff161561113f576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117ba611756565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833611195565b600081815260046020526040902054156118695760405162461bcd60e51b815260206004820152600b60248201527f47616d65206578697374730000000000000000000000000000000000000000006044820152606401610b71565b60016002600082825461187c9190612016565b9091555050600054600254600180546040517ff4bc77f70000000000000000000000000000000000000000000000000000000081526004810193909352306024840152604483015260648201526001600160a01b039091169063f4bc77f790608401600060405180830381600087803b1580156118f857600080fd5b505af115801561190c573d6000803e3d6000fd5b50506002805460009081526004602052604090819020859055905490517ff81446731d23d202ea16cf590daf64c6087251171612b2adde6acbef4b37580293506111a9925090815260200190565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408083206001600160a01b038516845290915290205460ff166107af576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260248101839052604401610b71565b6119f082611adc565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611a35576107528282611b60565b6107af611bd6565b611a45611c0e565b61113f576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000436005543384604051602001611abe9493929190938452602084019290925260601b6bffffffffffffffffffffffff19166040830152605482015260740190565b60408051601f19818403018152919052805160209091012092915050565b806001600160a01b03163b600003611b1257604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610b71565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051611b7d919061227a565b600060405180830381855af49150503d8060008114611bb8576040519150601f19603f3d011682016040523d82523d6000602084013e611bbd565b606091505b5091509150611bcd858383611c2d565b95945050505050565b341561113f576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611c186113c6565b5468010000000000000000900460ff16919050565b606082611c4257611c3d82611ca5565b611c9e565b8151158015611c5957506001600160a01b0384163b155b15611c9b576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610b71565b50805b9392505050565b805115611cb55780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208284031215611cf957600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611c9e57600080fd5b600060208284031215611d3b57600080fd5b5035919050565b6001600160a01b038116811461079157600080fd5b60008060408385031215611d6a57600080fd5b823591506020830135611d7c81611d42565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715611dc057611dc0611d87565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611def57611def611d87565b604052919050565b60008060408385031215611e0a57600080fd5b8235611e1581611d42565b915060208381013567ffffffffffffffff80821115611e3357600080fd5b818601915086601f830112611e4757600080fd5b813581811115611e5957611e59611d87565b611e6b601f8201601f19168501611dc6565b91508082528784828501011115611e8157600080fd5b80848401858401376000848284010152508093505050509250929050565b600080600060608486031215611eb457600080fd5b8335611ebf81611d42565b92506020840135611ecf81611d42565b929592945050506040919091013590565b600080600060408486031215611ef557600080fd5b833567ffffffffffffffff80821115611f0d57600080fd5b818601915086601f830112611f2157600080fd5b813581811115611f3057600080fd5b8760208260051b8501011115611f4557600080fd5b6020928301989097509590910135949350505050565b60005b83811015611f76578181015183820152602001611f5e565b50506000910152565b6020815260008251806020840152611f9e816040850160208701611f5b565b601f01601f19169190910160400192915050565b60008060408385031215611fc557600080fd5b82358015158114611fd557600080fd5b946020939093013593505050565b600060208284031215611ff557600080fd5b8135611c9e81611d42565b634e487b7160e01b600052601160045260246000fd5b808201808211156106b6576106b6612000565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208082528181018390526000906040600585901b8401810190840186845b878110156120e157868403603f190183528135368a9003601e1901811261209757600080fd5b8901858101903567ffffffffffffffff8111156120b357600080fd5b8036038213156120c257600080fd5b6120cd868284612029565b955050509184019190840190600101612071565b5091979650505050505050565b60006080828403121561210057600080fd5b6040516080810181811067ffffffffffffffff8211171561212357612123611d87565b806040525080915082518152602083015161213d81611d42565b8060208301525060408301516040820152606083015160608201525092915050565b6000610140828403121561217257600080fd5b61217a611d9d565b82518152602083015160208201526040830151604082015260608301516121a081611d42565b60608201526080838101519082015260a083015167ffffffffffffffff811681146121ca57600080fd5b60a08201526121dc8460c085016120ee565b60c08201529392505050565b600080604083850312156121fb57600080fd5b505080516020909101519092909150565b60006020828403121561221e57600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b60008261224a5761224a612225565b500490565b60008261225e5761225e612225565b500690565b80820281158282048414176106b6576106b6612000565b6000825161228c818460208701611f5b565b919091019291505056fea26469706673582212208dca471626d6662480d5d0562156b628c780d3b373fa499878f7647c164202f064736f6c63430008160033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "pause()": {
        "details": "called by the owner to pause, triggers stopped state"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "called by the owner to unpause, returns to normal state"
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "totalGame()": {
        "notice": "Storages"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4822,
        "contract": "contracts/Plinko/Plinko.sol:Plinko",
        "label": "_switchboard",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4824,
        "contract": "contracts/Plinko/Plinko.sol:Plinko",
        "label": "queue",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 4826,
        "contract": "contracts/Plinko/Plinko.sol:Plinko",
        "label": "sequence",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4828,
        "contract": "contracts/Plinko/Plinko.sol:Plinko",
        "label": "solvedSeq",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4832,
        "contract": "contracts/Plinko/Plinko.sol:Plinko",
        "label": "seq2GameId",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4340,
        "contract": "contracts/Plinko/Plinko.sol:Plinko",
        "label": "totalGame",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4342,
        "contract": "contracts/Plinko/Plinko.sol:Plinko",
        "label": "leaderboard",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4346,
        "contract": "contracts/Plinko/Plinko.sol:Plinko",
        "label": "degenMultiplier",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4350,
        "contract": "contracts/Plinko/Plinko.sol:Plinko",
        "label": "basicMultiplier",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4355,
        "contract": "contracts/Plinko/Plinko.sol:Plinko",
        "label": "gameIdToBetInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(BetInfo)4319_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_struct(BetInfo)4319_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Plinko.BetInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(BetInfo)4319_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BetInfo)4319_storage": {
        "encoding": "inplace",
        "label": "struct Plinko.BetInfo",
        "members": [
          {
            "astId": 4312,
            "contract": "contracts/Plinko/Plinko.sol:Plinko",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4314,
            "contract": "contracts/Plinko/Plinko.sol:Plinko",
            "label": "degen",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4316,
            "contract": "contracts/Plinko/Plinko.sol:Plinko",
            "label": "balls",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4318,
            "contract": "contracts/Plinko/Plinko.sol:Plinko",
            "label": "betAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}